// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nakama {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SBnNlcnZlciIeCglIZWFydGJlYXQSEQoJdGltZXN0YW1w",
            "GAEgASgDIskCCgVFcnJvchIMCgRjb2RlGAEgASgFEg8KB21lc3NhZ2UYAiAB",
            "KAkioAIKBENvZGUSFQoRUlVOVElNRV9FWENFUFRJT04QABIYChRVTlJFQ09H",
            "TklaRURfUEFZTE9BRBABEhMKD01JU1NJTkdfUEFZTE9BRBACEg0KCUJBRF9J",
            "TlBVVBADEg4KCkFVVEhfRVJST1IQBBITCg9VU0VSX0xJTktfSU5VU0UQBRIi",
            "Ch5VU0VSX0xJTktfUFJPVklERVJfVU5BVkFJTEFCTEUQBhIaChZVU0VSX1VO",
            "TElOS19ESVNBTExPV0VEEAcSFQoRVVNFUl9IQU5ETEVfSU5VU0UQCBIUChBH",
            "Uk9VUF9OQU1FX0lOVVNFEAkSHAoYU1RPUkFHRV9GRVRDSF9ESVNBTExPV0VE",
            "EAoSEwoPTUFUQ0hfTk9UX0ZPVU5EEAsirQMKE0F1dGhlbnRpY2F0ZVJlcXVl",
            "c3QSEwoLY29sbGF0aW9uSWQYASABKAkSMgoFZW1haWwYAiABKAsyIS5zZXJ2",
            "ZXIuQXV0aGVudGljYXRlUmVxdWVzdC5FbWFpbEgAEhIKCGZhY2Vib29rGAMg",
            "ASgJSAASEAoGZ29vZ2xlGAQgASgJSAASPQoLZ2FtZV9jZW50ZXIYBSABKAsy",
            "Ji5zZXJ2ZXIuQXV0aGVudGljYXRlUmVxdWVzdC5HYW1lQ2VudGVySAASDwoF",
            "c3RlYW0YBiABKAlIABIQCgZkZXZpY2UYByABKAlIABIQCgZjdXN0b20YCCAB",
            "KAlIABooCgVFbWFpbBINCgVlbWFpbBgBIAEoCRIQCghwYXNzd29yZBgCIAEo",
            "CRp+CgpHYW1lQ2VudGVyEhEKCXBsYXllcl9pZBgBIAEoCRIRCglidW5kbGVf",
            "aWQYAiABKAkSEQoJdGltZXN0YW1wGAMgASgDEgwKBHNhbHQYBCABKAkSEQoJ",
            "c2lnbmF0dXJlGAUgASgJEhYKDnB1YmxpY19rZXlfdXJsGAYgASgJQgkKB3Bh",
            "eWxvYWQilQIKFEF1dGhlbnRpY2F0ZVJlc3BvbnNlEhQKDGNvbGxhdGlvbl9p",
            "ZBgBIAEoCRI3CgdzZXNzaW9uGAIgASgLMiQuc2VydmVyLkF1dGhlbnRpY2F0",
            "ZVJlc3BvbnNlLlNlc3Npb25IABIzCgVlcnJvchgDIAEoCzIiLnNlcnZlci5B",
            "dXRoZW50aWNhdGVSZXNwb25zZS5FcnJvckgAGhgKB1Nlc3Npb24SDQoFdG9r",
            "ZW4YASABKAkaVAoFRXJyb3ISDAoEY29kZRgBIAEoBRIPCgdtZXNzYWdlGAIg",
            "ASgJEiwKB3JlcXVlc3QYAyABKAsyGy5zZXJ2ZXIuQXV0aGVudGljYXRlUmVx",
            "dWVzdEIJCgdwYXlsb2FkIqUVCghFbnZlbG9wZRIUCgxjb2xsYXRpb25faWQY",
            "ASABKAkSHgoFZXJyb3IYAiABKAsyDS5zZXJ2ZXIuRXJyb3JIABImCgloZWFy",
            "dGJlYXQYAyABKAsyES5zZXJ2ZXIuSGVhcnRiZWF0SAASIAoGbG9nb3V0GAQg",
            "ASgLMg4uc2VydmVyLkxvZ291dEgAEh0KBGxpbmsYBSABKAsyDS5zZXJ2ZXIu",
            "VExpbmtIABIhCgZ1bmxpbmsYBiABKAsyDy5zZXJ2ZXIuVFVubGlua0gAEigK",
            "CnNlbGZfZmV0Y2gYByABKAsyEi5zZXJ2ZXIuVFNlbGZGZXRjaEgAEioKC3Nl",
            "bGZfdXBkYXRlGAggASgLMhMuc2VydmVyLlRTZWxmVXBkYXRlSAASKgoLdXNl",
            "cnNfZmV0Y2gYCSABKAsyEy5zZXJ2ZXIuVFVzZXJzRmV0Y2hIABIdCgRzZWxm",
            "GAogASgLMg0uc2VydmVyLlRTZWxmSAASHwoFdXNlcnMYCyABKAsyDi5zZXJ2",
            "ZXIuVFVzZXJzSAASKAoKZnJpZW5kX2FkZBgMIAEoCzISLnNlcnZlci5URnJp",
            "ZW5kQWRkSAASLgoNZnJpZW5kX3JlbW92ZRgNIAEoCzIVLnNlcnZlci5URnJp",
            "ZW5kUmVtb3ZlSAASLAoMZnJpZW5kX2Jsb2NrGA4gASgLMhQuc2VydmVyLlRG",
            "cmllbmRCbG9ja0gAEiwKDGZyaWVuZHNfbGlzdBgPIAEoCzIULnNlcnZlci5U",
            "RnJpZW5kc0xpc3RIABIjCgdmcmllbmRzGBAgASgLMhAuc2VydmVyLlRGcmll",
            "bmRzSAASLAoMZ3JvdXBfY3JlYXRlGBEgASgLMhQuc2VydmVyLlRHcm91cENy",
            "ZWF0ZUgAEiwKDGdyb3VwX3VwZGF0ZRgSIAEoCzIULnNlcnZlci5UR3JvdXBV",
            "cGRhdGVIABIsCgxncm91cF9yZW1vdmUYEyABKAsyFC5zZXJ2ZXIuVEdyb3Vw",
            "UmVtb3ZlSAASLAoMZ3JvdXBzX2ZldGNoGBQgASgLMhQuc2VydmVyLlRHcm91",
            "cHNGZXRjaEgAEioKC2dyb3Vwc19saXN0GBUgASgLMhMuc2VydmVyLlRHcm91",
            "cHNMaXN0SAASMwoQZ3JvdXBzX3NlbGZfbGlzdBgWIAEoCzIXLnNlcnZlci5U",
            "R3JvdXBzU2VsZkxpc3RIABIzChBncm91cF91c2Vyc19saXN0GBcgASgLMhcu",
            "c2VydmVyLlRHcm91cFVzZXJzTGlzdEgAEigKCmdyb3VwX2pvaW4YGCABKAsy",
            "Ei5zZXJ2ZXIuVEdyb3VwSm9pbkgAEioKC2dyb3VwX2xlYXZlGBkgASgLMhMu",
            "c2VydmVyLlRHcm91cExlYXZlSAASLwoOZ3JvdXBfdXNlcl9hZGQYGiABKAsy",
            "FS5zZXJ2ZXIuVEdyb3VwVXNlckFkZEgAEjEKD2dyb3VwX3VzZXJfa2ljaxgb",
            "IAEoCzIWLnNlcnZlci5UR3JvdXBVc2VyS2lja0gAEjcKEmdyb3VwX3VzZXJf",
            "cHJvbW90ZRgcIAEoCzIZLnNlcnZlci5UR3JvdXBVc2VyUHJvbW90ZUgAEh8K",
            "BWdyb3VwGB0gASgLMg4uc2VydmVyLlRHcm91cEgAEiEKBmdyb3VwcxgeIAEo",
            "CzIPLnNlcnZlci5UR3JvdXBzSAASKgoLZ3JvdXBfdXNlcnMYHyABKAsyEy5z",
            "ZXJ2ZXIuVEdyb3VwVXNlcnNIABIoCgp0b3BpY19qb2luGCAgASgLMhIuc2Vy",
            "dmVyLlRUb3BpY0pvaW5IABIqCgt0b3BpY19sZWF2ZRghIAEoCzITLnNlcnZl",
            "ci5UVG9waWNMZWF2ZUgAEjcKEnRvcGljX21lc3NhZ2Vfc2VuZBgiIAEoCzIZ",
            "LnNlcnZlci5UVG9waWNNZXNzYWdlU2VuZEgAEjkKE3RvcGljX21lc3NhZ2Vz",
            "X2xpc3QYIyABKAsyGi5zZXJ2ZXIuVFRvcGljTWVzc2FnZXNMaXN0SAASHwoF",
            "dG9waWMYJCABKAsyDi5zZXJ2ZXIuVFRvcGljSAASNQoRdG9waWNfbWVzc2Fn",
            "ZV9hY2sYJSABKAsyGC5zZXJ2ZXIuVFRvcGljTWVzc2FnZUFja0gAEi0KDXRv",
            "cGljX21lc3NhZ2UYJiABKAsyFC5zZXJ2ZXIuVG9waWNNZXNzYWdlSAASMAoO",
            "dG9waWNfbWVzc2FnZXMYJyABKAsyFi5zZXJ2ZXIuVFRvcGljTWVzc2FnZXNI",
            "ABIvCg50b3BpY19wcmVzZW5jZRgoIAEoCzIVLnNlcnZlci5Ub3BpY1ByZXNl",
            "bmNlSAASLAoMbWF0Y2hfY3JlYXRlGCkgASgLMhQuc2VydmVyLlRNYXRjaENy",
            "ZWF0ZUgAEigKCm1hdGNoX2pvaW4YKiABKAsyEi5zZXJ2ZXIuVE1hdGNoSm9p",
            "bkgAEioKC21hdGNoX2xlYXZlGCsgASgLMhMuc2VydmVyLlRNYXRjaExlYXZl",
            "SAASMQoPbWF0Y2hfZGF0YV9zZW5kGCwgASgLMhYuc2VydmVyLlRNYXRjaERh",
            "dGFTZW5kSAASHwoFbWF0Y2gYLSABKAsyDi5zZXJ2ZXIuVE1hdGNoSAASJwoK",
            "bWF0Y2hfZGF0YRguIAEoCzIRLnNlcnZlci5NYXRjaERhdGFIABIvCg5tYXRj",
            "aF9wcmVzZW5jZRgvIAEoCzIVLnNlcnZlci5NYXRjaFByZXNlbmNlSAASLgoN",
            "c3RvcmFnZV9mZXRjaBgwIAEoCzIVLnNlcnZlci5UU3RvcmFnZUZldGNoSAAS",
            "LgoNc3RvcmFnZV93cml0ZRgxIAEoCzIVLnNlcnZlci5UU3RvcmFnZVdyaXRl",
            "SAASMAoOc3RvcmFnZV9yZW1vdmUYMiABKAsyFi5zZXJ2ZXIuVFN0b3JhZ2VS",
            "ZW1vdmVIABIsCgxzdG9yYWdlX2RhdGEYMyABKAsyFC5zZXJ2ZXIuVFN0b3Jh",
            "Z2VEYXRhSAASKgoLc3RvcmFnZV9rZXkYNCABKAsyEy5zZXJ2ZXIuVFN0b3Jh",
            "Z2VLZXlIABI2ChFsZWFkZXJib2FyZHNfbGlzdBg1IAEoCzIZLnNlcnZlci5U",
            "TGVhZGVyYm9hcmRzTGlzdEgAEkMKGGxlYWRlcmJvYXJkX3JlY29yZF93cml0",
            "ZRg2IAEoCzIfLnNlcnZlci5UTGVhZGVyYm9hcmRSZWNvcmRXcml0ZUgAEkUK",
            "GWxlYWRlcmJvYXJkX3JlY29yZHNfZmV0Y2gYNyABKAsyIC5zZXJ2ZXIuVExl",
            "YWRlcmJvYXJkUmVjb3Jkc0ZldGNoSAASQwoYbGVhZGVyYm9hcmRfcmVjb3Jk",
            "c19saXN0GDggASgLMh8uc2VydmVyLlRMZWFkZXJib2FyZFJlY29yZHNMaXN0",
            "SAASLQoMbGVhZGVyYm9hcmRzGDkgASgLMhUuc2VydmVyLlRMZWFkZXJib2Fy",
            "ZHNIABI4ChJsZWFkZXJib2FyZF9yZWNvcmQYOiABKAsyGi5zZXJ2ZXIuVExl",
            "YWRlcmJvYXJkUmVjb3JkSAASOgoTbGVhZGVyYm9hcmRfcmVjb3Jkcxg7IAEo",
            "CzIbLnNlcnZlci5UTGVhZGVyYm9hcmRSZWNvcmRzSABCCQoHcGF5bG9hZCII",
            "CgZMb2dvdXQi4AEKBVRMaW5rEjIKBWVtYWlsGAEgASgLMiEuc2VydmVyLkF1",
            "dGhlbnRpY2F0ZVJlcXVlc3QuRW1haWxIABISCghmYWNlYm9vaxgCIAEoCUgA",
            "EhAKBmdvb2dsZRgDIAEoCUgAEj0KC2dhbWVfY2VudGVyGAQgASgLMiYuc2Vy",
            "dmVyLkF1dGhlbnRpY2F0ZVJlcXVlc3QuR2FtZUNlbnRlckgAEg8KBXN0ZWFt",
            "GAUgASgJSAASEAoGZGV2aWNlGAYgASgJSAASEAoGY3VzdG9tGAcgASgJSABC",
            "CQoHcGF5bG9hZCKXAQoHVFVubGluaxIPCgVlbWFpbBgBIAEoCUgAEhIKCGZh",
            "Y2Vib29rGAIgASgJSAASEAoGZ29vZ2xlGAMgASgJSAASFQoLZ2FtZV9jZW50",
            "ZXIYBCABKAlIABIPCgVzdGVhbRgFIAEoCUgAEhAKBmRldmljZRgGIAEoCUgA",
            "EhAKBmN1c3RvbRgHIAEoCUgAQgkKB3BheWxvYWQizAEKBFVzZXISCgoCaWQY",
            "ASABKAwSDgoGaGFuZGxlGAIgASgJEhAKCGZ1bGxuYW1lGAMgASgJEhIKCmF2",
            "YXRhcl91cmwYBCABKAkSDAoEbGFuZxgFIAEoCRIQCghsb2NhdGlvbhgGIAEo",
            "CRIQCgh0aW1lem9uZRgHIAEoCRIQCghtZXRhZGF0YRgIIAEoDBISCgpjcmVh",
            "dGVkX2F0GAkgASgDEhIKCnVwZGF0ZWRfYXQYCiABKAMSFgoObGFzdF9vbmxp",
            "bmVfYXQYCyABKAMiugEKBFNlbGYSGgoEdXNlchgBIAEoCzIMLnNlcnZlci5V",
            "c2VyEhAKCHZlcmlmaWVkGAIgASgIEg0KBWVtYWlsGAMgASgJEhEKCWRldmlj",
            "ZV9pZBgEIAMoCRITCgtmYWNlYm9va19pZBgFIAEoCRIRCglnb29nbGVfaWQY",
            "BiABKAkSFQoNZ2FtZWNlbnRlcl9pZBgHIAEoCRIQCghzdGVhbV9pZBgIIAEo",
            "CRIRCgljdXN0b21faWQYCSABKAkiDAoKVFNlbGZGZXRjaCIjCgVUU2VsZhIa",
            "CgRzZWxmGAEgASgLMgwuc2VydmVyLlNlbGYihwEKC1RTZWxmVXBkYXRlEg4K",
            "BmhhbmRsZRgBIAEoCRIQCghmdWxsbmFtZRgCIAEoCRIQCgh0aW1lem9uZRgD",
            "IAEoCRIQCghsb2NhdGlvbhgEIAEoCRIMCgRsYW5nGAUgASgJEhAKCG1ldGFk",
            "YXRhGAYgASgMEhIKCmF2YXRhcl91cmwYByABKAkiHwoLVFVzZXJzRmV0Y2gS",
            "EAoIdXNlcl9pZHMYASADKAwiJQoGVFVzZXJzEhsKBXVzZXJzGAEgAygLMgwu",
            "c2VydmVyLlVzZXIiMgoGRnJpZW5kEhoKBHVzZXIYASABKAsyDC5zZXJ2ZXIu",
            "VXNlchIMCgR0eXBlGAIgASgDIh0KClRGcmllbmRBZGQSDwoHdXNlcl9pZBgB",
            "IAEoDCIgCg1URnJpZW5kUmVtb3ZlEg8KB3VzZXJfaWQYASABKAwiHwoMVEZy",
            "aWVuZEJsb2NrEg8KB3VzZXJfaWQYASABKAwiDgoMVEZyaWVuZHNMaXN0IisK",
            "CFRGcmllbmRzEh8KB2ZyaWVuZHMYASADKAsyDi5zZXJ2ZXIuRnJpZW5kIt0B",
            "CgVHcm91cBIKCgJpZBgBIAEoDBIPCgdwcml2YXRlGAIgASgIEhIKCmNyZWF0",
            "b3JfaWQYAyABKAwSDAoEbmFtZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEo",
            "CRISCgphdmF0YXJfdXJsGAYgASgJEgwKBGxhbmcYByABKAkSFQoNdXRjX29m",
            "ZnNldF9tcxgIIAEoAxIQCghtZXRhZGF0YRgJIAEoDBINCgVjb3VudBgKIAEo",
            "AxISCgpjcmVhdGVkX2F0GAsgASgDEhIKCnVwZGF0ZWRfYXQYDCABKAMidgoM",
            "VEdyb3VwQ3JlYXRlEgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiAB",
            "KAkSEgoKYXZhdGFyX3VybBgDIAEoCRIMCgRsYW5nGAQgASgJEhAKCG1ldGFk",
            "YXRhGAUgASgMEg8KB3ByaXZhdGUYBiABKAgiJgoGVEdyb3VwEhwKBWdyb3Vw",
            "GAEgASgLMg0uc2VydmVyLkdyb3VwIogBCgxUR3JvdXBVcGRhdGUSEAoIZ3Jv",
            "dXBfaWQYASABKAwSDwoHcHJpdmF0ZRgCIAEoCBIMCgRuYW1lGAMgASgJEhMK",
            "C2Rlc2NyaXB0aW9uGAQgASgJEhIKCmF2YXRhcl91cmwYBSABKAkSDAoEbGFu",
            "ZxgGIAEoCRIQCghtZXRhZGF0YRgHIAEoDCIgCgxUR3JvdXBSZW1vdmUSEAoI",
            "Z3JvdXBfaWQYASABKAwiEQoPVEdyb3Vwc1NlbGZMaXN0IiEKDFRHcm91cHNG",
            "ZXRjaBIRCglncm91cF9pZHMYASADKAwiiAEKC1RHcm91cHNMaXN0EhIKCnBh",
            "Z2VfbGltaXQYASABKAMSFAoMb3JkZXJfYnlfYXNjGAIgASgIEg4KBGxhbmcY",
            "AyABKAlIABIUCgpjcmVhdGVkX2F0GAQgASgDSAASDwoFY291bnQYBSABKANI",
            "ABIOCgZjdXJzb3IYByABKAxCCAoGZmlsdGVyIjgKB1RHcm91cHMSHQoGZ3Jv",
            "dXBzGAEgAygLMg0uc2VydmVyLkdyb3VwEg4KBmN1cnNvchgCIAEoDCI1CglH",
            "cm91cFVzZXISGgoEdXNlchgBIAEoCzIMLnNlcnZlci5Vc2VyEgwKBHR5cGUY",
            "AiABKAMiIwoPVEdyb3VwVXNlcnNMaXN0EhAKCGdyb3VwX2lkGAEgASgMIi8K",
            "C1RHcm91cFVzZXJzEiAKBXVzZXJzGAEgAygLMhEuc2VydmVyLkdyb3VwVXNl",
            "ciIeCgpUR3JvdXBKb2luEhAKCGdyb3VwX2lkGAEgASgMIh8KC1RHcm91cExl",
            "YXZlEhAKCGdyb3VwX2lkGAEgASgMIjIKDVRHcm91cFVzZXJBZGQSEAoIZ3Jv",
            "dXBfaWQYASABKAwSDwoHdXNlcl9pZBgCIAEoDCIzCg5UR3JvdXBVc2VyS2lj",
            "axIQCghncm91cF9pZBgBIAEoDBIPCgd1c2VyX2lkGAIgASgMIjYKEVRHcm91",
            "cFVzZXJQcm9tb3RlEhAKCGdyb3VwX2lkGAEgASgMEg8KB3VzZXJfaWQYAiAB",
            "KAwiQQoHVG9waWNJZBIMCgJkbRgBIAEoDEgAEg4KBHJvb20YAiABKAxIABIS",
            "Cghncm91cF9pZBgDIAEoDEgAQgQKAmlkIkMKDFVzZXJQcmVzZW5jZRIPCgd1",
            "c2VyX2lkGAEgASgMEhIKCnNlc3Npb25faWQYAiABKAwSDgoGaGFuZGxlGAMg",
            "ASgJIkkKClRUb3BpY0pvaW4SEQoHdXNlcl9pZBgBIAEoDEgAEg4KBHJvb20Y",
            "AiABKAxIABISCghncm91cF9pZBgDIAEoDEgAQgQKAmlkInUKBlRUb3BpYxIe",
            "CgV0b3BpYxgBIAEoCzIPLnNlcnZlci5Ub3BpY0lkEicKCXByZXNlbmNlcxgC",
            "IAMoCzIULnNlcnZlci5Vc2VyUHJlc2VuY2USIgoEc2VsZhgDIAEoCzIULnNl",
            "cnZlci5Vc2VyUHJlc2VuY2UiLQoLVFRvcGljTGVhdmUSHgoFdG9waWMYASAB",
            "KAsyDy5zZXJ2ZXIuVG9waWNJZCJBChFUVG9waWNNZXNzYWdlU2VuZBIeCgV0",
            "b3BpYxgBIAEoCzIPLnNlcnZlci5Ub3BpY0lkEgwKBGRhdGEYAiABKAwiXgoQ",
            "VFRvcGljTWVzc2FnZUFjaxISCgptZXNzYWdlX2lkGAEgASgMEhIKCmNyZWF0",
            "ZWRfYXQYAiABKAMSEgoKZXhwaXJlc19hdBgDIAEoAxIOCgZoYW5kbGUYBCAB",
            "KAkipwEKDFRvcGljTWVzc2FnZRIeCgV0b3BpYxgBIAEoCzIPLnNlcnZlci5U",
            "b3BpY0lkEg8KB3VzZXJfaWQYAiABKAwSEgoKbWVzc2FnZV9pZBgDIAEoDBIS",
            "CgpjcmVhdGVkX2F0GAQgASgDEhIKCmV4cGlyZXNfYXQYBSABKAMSDgoGaGFu",
            "ZGxlGAYgASgJEgwKBHR5cGUYByABKAMSDAoEZGF0YRgIIAEoDCKBAQoSVFRv",
            "cGljTWVzc2FnZXNMaXN0EhEKB3VzZXJfaWQYASABKAxIABIOCgRyb29tGAIg",
            "ASgMSAASEgoIZ3JvdXBfaWQYAyABKAxIABIOCgZjdXJzb3IYBCABKAwSDwoH",
            "Zm9yd2FyZBgFIAEoCBINCgVsaW1pdBgGIAEoA0IECgJpZCJICg5UVG9waWNN",
            "ZXNzYWdlcxImCghtZXNzYWdlcxgBIAMoCzIULnNlcnZlci5Ub3BpY01lc3Nh",
            "Z2USDgoGY3Vyc29yGAIgASgMInoKDVRvcGljUHJlc2VuY2USHgoFdG9waWMY",
            "ASABKAsyDy5zZXJ2ZXIuVG9waWNJZBIjCgVqb2lucxgCIAMoCzIULnNlcnZl",
            "ci5Vc2VyUHJlc2VuY2USJAoGbGVhdmVzGAMgAygLMhQuc2VydmVyLlVzZXJQ",
            "cmVzZW5jZSIOCgxUTWF0Y2hDcmVhdGUiHgoKVE1hdGNoSm9pbhIQCghtYXRj",
            "aF9pZBgBIAEoDCJnCgZUTWF0Y2gSEAoIbWF0Y2hfaWQYASABKAwSJwoJcHJl",
            "c2VuY2VzGAIgAygLMhQuc2VydmVyLlVzZXJQcmVzZW5jZRIiCgRzZWxmGAMg",
            "ASgLMhQuc2VydmVyLlVzZXJQcmVzZW5jZSJBCg5UTWF0Y2hEYXRhU2VuZBIQ",
            "CghtYXRjaF9pZBgBIAEoDBIPCgdvcF9jb2RlGAIgASgDEgwKBGRhdGEYAyAB",
            "KAwiZAoJTWF0Y2hEYXRhEhAKCG1hdGNoX2lkGAEgASgMEiYKCHByZXNlbmNl",
            "GAIgASgLMhQuc2VydmVyLlVzZXJQcmVzZW5jZRIPCgdvcF9jb2RlGAMgASgD",
            "EgwKBGRhdGEYBCABKAwiHwoLVE1hdGNoTGVhdmUSEAoIbWF0Y2hfaWQYASAB",
            "KAwibAoNTWF0Y2hQcmVzZW5jZRIQCghtYXRjaF9pZBgBIAEoDBIjCgVqb2lu",
            "cxgCIAMoCzIULnNlcnZlci5Vc2VyUHJlc2VuY2USJAoGbGVhdmVzGAMgAygL",
            "MhQuc2VydmVyLlVzZXJQcmVzZW5jZSKSAQoNVFN0b3JhZ2VGZXRjaBIuCgRr",
            "ZXlzGAEgAygLMiAuc2VydmVyLlRTdG9yYWdlRmV0Y2guU3RvcmFnZUtleRpR",
            "CgpTdG9yYWdlS2V5Eg4KBmJ1Y2tldBgBIAEoCRISCgpjb2xsZWN0aW9uGAIg",
            "ASgJEg4KBnJlY29yZBgDIAEoCRIPCgd1c2VyX2lkGAQgASgMIqICCgxUU3Rv",
            "cmFnZURhdGESLgoEZGF0YRgBIAMoCzIgLnNlcnZlci5UU3RvcmFnZURhdGEu",
            "U3RvcmFnZURhdGEa4QEKC1N0b3JhZ2VEYXRhEg4KBmJ1Y2tldBgBIAEoCRIS",
            "Cgpjb2xsZWN0aW9uGAIgASgJEg4KBnJlY29yZBgDIAEoCRIPCgd1c2VyX2lk",
            "GAQgASgMEg0KBXZhbHVlGAUgASgMEg8KB3ZlcnNpb24YBiABKAwSFwoPcGVy",
            "bWlzc2lvbl9yZWFkGAcgASgDEhgKEHBlcm1pc3Npb25fd3JpdGUYCCABKAMS",
            "EgoKY3JlYXRlZF9hdBgJIAEoAxISCgp1cGRhdGVkX2F0GAogASgDEhIKCmV4",
            "cGlyZXNfYXQYCyABKAMiowEKDVRTdG9yYWdlV3JpdGUSLwoEZGF0YRgDIAMo",
            "CzIhLnNlcnZlci5UU3RvcmFnZVdyaXRlLlN0b3JhZ2VEYXRhGmEKC1N0b3Jh",
            "Z2VEYXRhEg4KBmJ1Y2tldBgBIAEoCRISCgpjb2xsZWN0aW9uGAIgASgJEg4K",
            "BnJlY29yZBgDIAEoCRINCgV2YWx1ZRgEIAEoDBIPCgd2ZXJzaW9uGAUgASgM",
            "Io4BCgtUU3RvcmFnZUtleRIsCgRrZXlzGAEgAygLMh4uc2VydmVyLlRTdG9y",
            "YWdlS2V5LlN0b3JhZ2VLZXkaUQoKU3RvcmFnZUtleRIOCgZidWNrZXQYASAB",
            "KAkSEgoKY29sbGVjdGlvbhgCIAEoCRIOCgZyZWNvcmQYAyABKAkSDwoHdmVy",
            "c2lvbhgEIAEoDCKUAQoOVFN0b3JhZ2VSZW1vdmUSLwoEa2V5cxgBIAMoCzIh",
            "LnNlcnZlci5UU3RvcmFnZVJlbW92ZS5TdG9yYWdlS2V5GlEKClN0b3JhZ2VL",
            "ZXkSDgoGYnVja2V0GAEgASgJEhIKCmNvbGxlY3Rpb24YAiABKAkSDgoGcmVj",
            "b3JkGAMgASgJEg8KB3ZlcnNpb24YBCABKAwimQEKC0xlYWRlcmJvYXJkEgoK",
            "AmlkGAEgASgMEhUKDWF1dGhvcml0YXRpdmUYAiABKAgSDAoEc29ydBgDIAEo",
            "AxINCgVjb3VudBgEIAEoAxIWCg5yZXNldF9zY2hlZHVsZRgFIAEoCRIQCght",
            "ZXRhZGF0YRgGIAEoDBIPCgduZXh0X2lkGAcgASgMEg8KB3ByZXZfaWQYCCAB",
            "KAwi/AEKEUxlYWRlcmJvYXJkUmVjb3JkEhYKDmxlYWRlcmJvYXJkX2lkGAEg",
            "ASgMEhAKCG93bmVyX2lkGAIgASgMEg4KBmhhbmRsZRgDIAEoCRIMCgRsYW5n",
            "GAQgASgJEhAKCGxvY2F0aW9uGAUgASgJEhAKCHRpbWV6b25lGAYgASgJEgwK",
            "BHJhbmsYByABKAMSDQoFc2NvcmUYCCABKAMSEQoJbnVtX3Njb3JlGAkgASgD",
            "EhAKCG1ldGFkYXRhGAogASgMEhEKCXJhbmtlZF9hdBgLIAEoAxISCgp1cGRh",
            "dGVkX2F0GAwgASgDEhIKCmV4cGlyZXNfYXQYDSABKAMiMgoRVExlYWRlcmJv",
            "YXJkc0xpc3QSDQoFbGltaXQYASABKAMSDgoGY3Vyc29yGAIgASgMIkoKDVRM",
            "ZWFkZXJib2FyZHMSKQoMbGVhZGVyYm9hcmRzGAEgAygLMhMuc2VydmVyLkxl",
            "YWRlcmJvYXJkEg4KBmN1cnNvchgCIAEoDCKsAQoXVExlYWRlcmJvYXJkUmVj",
            "b3JkV3JpdGUSFgoObGVhZGVyYm9hcmRfaWQYASABKAwSDgoEaW5jchgCIAEo",
            "A0gAEg4KBGRlY3IYAyABKANIABINCgNzZXQYBCABKANIABIOCgRiZXN0GAUg",
            "ASgDSAASEAoIbG9jYXRpb24YBiABKAkSEAoIdGltZXpvbmUYByABKAkSEAoI",
            "bWV0YWRhdGEYCCABKAxCBAoCb3AiPwoSVExlYWRlcmJvYXJkUmVjb3JkEikK",
            "BnJlY29yZBgBIAEoCzIZLnNlcnZlci5MZWFkZXJib2FyZFJlY29yZCJSChhU",
            "TGVhZGVyYm9hcmRSZWNvcmRzRmV0Y2gSFwoPbGVhZGVyYm9hcmRfaWRzGAEg",
            "AygMEg0KBWxpbWl0GAIgASgDEg4KBmN1cnNvchgDIAEoDCKAAgoXVExlYWRl",
            "cmJvYXJkUmVjb3Jkc0xpc3QSFgoObGVhZGVyYm9hcmRfaWQYASABKAwSEgoI",
            "b3duZXJfaWQYAiABKAxIABI7Cglvd25lcl9pZHMYAyABKAsyJi5zZXJ2ZXIu",
            "VExlYWRlcmJvYXJkUmVjb3Jkc0xpc3QuT3duZXJzSAASDgoEbGFuZxgEIAEo",
            "CUgAEhIKCGxvY2F0aW9uGAUgASgJSAASEgoIdGltZXpvbmUYBiABKAlIABIN",
            "CgVsaW1pdBgHIAEoAxIOCgZjdXJzb3IYCCABKAwaGwoGT3duZXJzEhEKCW93",
            "bmVyX2lkcxgBIAMoDEIICgZmaWx0ZXIiUQoTVExlYWRlcmJvYXJkUmVjb3Jk",
            "cxIqCgdyZWNvcmRzGAEgAygLMhkuc2VydmVyLkxlYWRlcmJvYXJkUmVjb3Jk",
            "Eg4KBmN1cnNvchgCIAEoDEIJqgIGTmFrYW1hYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Heartbeat), global::Nakama.Heartbeat.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Error), global::Nakama.Error.Parser, new[]{ "Code", "Message" }, null, new[]{ typeof(global::Nakama.Error.Types.Code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest), global::Nakama.AuthenticateRequest.Parser, new[]{ "CollationId", "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Payload" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest.Types.Email), global::Nakama.AuthenticateRequest.Types.Email.Parser, new[]{ "Email_", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest.Types.GameCenter), global::Nakama.AuthenticateRequest.Types.GameCenter.Parser, new[]{ "PlayerId", "BundleId", "Timestamp", "Salt", "Signature", "PublicKeyUrl" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse), global::Nakama.AuthenticateResponse.Parser, new[]{ "CollationId", "Session", "Error" }, new[]{ "Payload" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse.Types.Session), global::Nakama.AuthenticateResponse.Types.Session.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse.Types.Error), global::Nakama.AuthenticateResponse.Types.Error.Parser, new[]{ "Code", "Message", "Request" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Envelope), global::Nakama.Envelope.Parser, new[]{ "CollationId", "Error", "Heartbeat", "Logout", "Link", "Unlink", "SelfFetch", "SelfUpdate", "UsersFetch", "Self", "Users", "FriendAdd", "FriendRemove", "FriendBlock", "FriendsList", "Friends", "GroupCreate", "GroupUpdate", "GroupRemove", "GroupsFetch", "GroupsList", "GroupsSelfList", "GroupUsersList", "GroupJoin", "GroupLeave", "GroupUserAdd", "GroupUserKick", "GroupUserPromote", "Group", "Groups", "GroupUsers", "TopicJoin", "TopicLeave", "TopicMessageSend", "TopicMessagesList", "Topic", "TopicMessageAck", "TopicMessage", "TopicMessages", "TopicPresence", "MatchCreate", "MatchJoin", "MatchLeave", "MatchDataSend", "Match", "MatchData", "MatchPresence", "StorageFetch", "StorageWrite", "StorageRemove", "StorageData", "StorageKey", "LeaderboardsList", "LeaderboardRecordWrite", "LeaderboardRecordsFetch", "LeaderboardRecordsList", "Leaderboards", "LeaderboardRecord", "LeaderboardRecords" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Logout), global::Nakama.Logout.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLink), global::Nakama.TLink.Parser, new[]{ "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUnlink), global::Nakama.TUnlink.Parser, new[]{ "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.User), global::Nakama.User.Parser, new[]{ "Id", "Handle", "Fullname", "AvatarUrl", "Lang", "Location", "Timezone", "Metadata", "CreatedAt", "UpdatedAt", "LastOnlineAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Self), global::Nakama.Self.Parser, new[]{ "User", "Verified", "Email", "DeviceId", "FacebookId", "GoogleId", "GamecenterId", "SteamId", "CustomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelfFetch), global::Nakama.TSelfFetch.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelf), global::Nakama.TSelf.Parser, new[]{ "Self" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelfUpdate), global::Nakama.TSelfUpdate.Parser, new[]{ "Handle", "Fullname", "Timezone", "Location", "Lang", "Metadata", "AvatarUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUsersFetch), global::Nakama.TUsersFetch.Parser, new[]{ "UserIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUsers), global::Nakama.TUsers.Parser, new[]{ "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Friend), global::Nakama.Friend.Parser, new[]{ "User", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendAdd), global::Nakama.TFriendAdd.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendRemove), global::Nakama.TFriendRemove.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendBlock), global::Nakama.TFriendBlock.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsList), global::Nakama.TFriendsList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriends), global::Nakama.TFriends.Parser, new[]{ "Friends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Group), global::Nakama.Group.Parser, new[]{ "Id", "Private", "CreatorId", "Name", "Description", "AvatarUrl", "Lang", "UtcOffsetMs", "Metadata", "Count", "CreatedAt", "UpdatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupCreate), global::Nakama.TGroupCreate.Parser, new[]{ "Name", "Description", "AvatarUrl", "Lang", "Metadata", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroup), global::Nakama.TGroup.Parser, new[]{ "Group" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUpdate), global::Nakama.TGroupUpdate.Parser, new[]{ "GroupId", "Private", "Name", "Description", "AvatarUrl", "Lang", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupRemove), global::Nakama.TGroupRemove.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsSelfList), global::Nakama.TGroupsSelfList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsFetch), global::Nakama.TGroupsFetch.Parser, new[]{ "GroupIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsList), global::Nakama.TGroupsList.Parser, new[]{ "PageLimit", "OrderByAsc", "Lang", "CreatedAt", "Count", "Cursor" }, new[]{ "Filter" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroups), global::Nakama.TGroups.Parser, new[]{ "Groups", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GroupUser), global::Nakama.GroupUser.Parser, new[]{ "User", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersList), global::Nakama.TGroupUsersList.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsers), global::Nakama.TGroupUsers.Parser, new[]{ "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupJoin), global::Nakama.TGroupJoin.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupLeave), global::Nakama.TGroupLeave.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUserAdd), global::Nakama.TGroupUserAdd.Parser, new[]{ "GroupId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUserKick), global::Nakama.TGroupUserKick.Parser, new[]{ "GroupId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUserPromote), global::Nakama.TGroupUserPromote.Parser, new[]{ "GroupId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicId), global::Nakama.TopicId.Parser, new[]{ "Dm", "Room", "GroupId" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UserPresence), global::Nakama.UserPresence.Parser, new[]{ "UserId", "SessionId", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicJoin), global::Nakama.TTopicJoin.Parser, new[]{ "UserId", "Room", "GroupId" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopic), global::Nakama.TTopic.Parser, new[]{ "Topic", "Presences", "Self" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicLeave), global::Nakama.TTopicLeave.Parser, new[]{ "Topic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessageSend), global::Nakama.TTopicMessageSend.Parser, new[]{ "Topic", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessageAck), global::Nakama.TTopicMessageAck.Parser, new[]{ "MessageId", "CreatedAt", "ExpiresAt", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicMessage), global::Nakama.TopicMessage.Parser, new[]{ "Topic", "UserId", "MessageId", "CreatedAt", "ExpiresAt", "Handle", "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessagesList), global::Nakama.TTopicMessagesList.Parser, new[]{ "UserId", "Room", "GroupId", "Cursor", "Forward", "Limit" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessages), global::Nakama.TTopicMessages.Parser, new[]{ "Messages", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicPresence), global::Nakama.TopicPresence.Parser, new[]{ "Topic", "Joins", "Leaves" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchCreate), global::Nakama.TMatchCreate.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchJoin), global::Nakama.TMatchJoin.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatch), global::Nakama.TMatch.Parser, new[]{ "MatchId", "Presences", "Self" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchDataSend), global::Nakama.TMatchDataSend.Parser, new[]{ "MatchId", "OpCode", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchData), global::Nakama.MatchData.Parser, new[]{ "MatchId", "Presence", "OpCode", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchLeave), global::Nakama.TMatchLeave.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchPresence), global::Nakama.MatchPresence.Parser, new[]{ "MatchId", "Joins", "Leaves" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageFetch), global::Nakama.TStorageFetch.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageFetch.Types.StorageKey), global::Nakama.TStorageFetch.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageData), global::Nakama.TStorageData.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageData.Types.StorageData), global::Nakama.TStorageData.Types.StorageData.Parser, new[]{ "Bucket", "Collection", "Record", "UserId", "Value", "Version", "PermissionRead", "PermissionWrite", "CreatedAt", "UpdatedAt", "ExpiresAt" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageWrite), global::Nakama.TStorageWrite.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageWrite.Types.StorageData), global::Nakama.TStorageWrite.Types.StorageData.Parser, new[]{ "Bucket", "Collection", "Record", "Value", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageKey), global::Nakama.TStorageKey.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageKey.Types.StorageKey), global::Nakama.TStorageKey.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageRemove), global::Nakama.TStorageRemove.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageRemove.Types.StorageKey), global::Nakama.TStorageRemove.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Leaderboard), global::Nakama.Leaderboard.Parser, new[]{ "Id", "Authoritative", "Sort", "Count", "ResetSchedule", "Metadata", "NextId", "PrevId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LeaderboardRecord), global::Nakama.LeaderboardRecord.Parser, new[]{ "LeaderboardId", "OwnerId", "Handle", "Lang", "Location", "Timezone", "Rank", "Score", "NumScore", "Metadata", "RankedAt", "UpdatedAt", "ExpiresAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardsList), global::Nakama.TLeaderboardsList.Parser, new[]{ "Limit", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboards), global::Nakama.TLeaderboards.Parser, new[]{ "Leaderboards", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordWrite), global::Nakama.TLeaderboardRecordWrite.Parser, new[]{ "LeaderboardId", "Incr", "Decr", "Set", "Best", "Location", "Timezone", "Metadata" }, new[]{ "Op" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecord), global::Nakama.TLeaderboardRecord.Parser, new[]{ "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsFetch), global::Nakama.TLeaderboardRecordsFetch.Parser, new[]{ "LeaderboardIds", "Limit", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsList), global::Nakama.TLeaderboardRecordsList.Parser, new[]{ "LeaderboardId", "OwnerId", "OwnerIds", "Lang", "Location", "Timezone", "Limit", "Cursor" }, new[]{ "Filter" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsList.Types.Owners), global::Nakama.TLeaderboardRecordsList.Types.Owners.Parser, new[]{ "OwnerIds" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecords), global::Nakama.TLeaderboardRecords.Parser, new[]{ "Records", "Cursor" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Code {
        [pbr::OriginalName("RUNTIME_EXCEPTION")] RuntimeException = 0,
        [pbr::OriginalName("UNRECOGNIZED_PAYLOAD")] UnrecognizedPayload = 1,
        [pbr::OriginalName("MISSING_PAYLOAD")] MissingPayload = 2,
        [pbr::OriginalName("BAD_INPUT")] BadInput = 3,
        [pbr::OriginalName("AUTH_ERROR")] AuthError = 4,
        [pbr::OriginalName("USER_LINK_INUSE")] UserLinkInuse = 5,
        [pbr::OriginalName("USER_LINK_PROVIDER_UNAVAILABLE")] UserLinkProviderUnavailable = 6,
        [pbr::OriginalName("USER_UNLINK_DISALLOWED")] UserUnlinkDisallowed = 7,
        [pbr::OriginalName("USER_HANDLE_INUSE")] UserHandleInuse = 8,
        [pbr::OriginalName("GROUP_NAME_INUSE")] GroupNameInuse = 9,
        [pbr::OriginalName("STORAGE_FETCH_DISALLOWED")] StorageFetchDisallowed = 10,
        [pbr::OriginalName("MATCH_NOT_FOUND")] MatchNotFound = 11,
      }

    }
    #endregion

  }

  public sealed partial class AuthenticateRequest : pb::IMessage<AuthenticateRequest> {
    private static readonly pb::MessageParser<AuthenticateRequest> _parser = new pb::MessageParser<AuthenticateRequest>(() => new AuthenticateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest(AuthenticateRequest other) : this() {
      collationId_ = other.collationId_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email.Clone();
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter.Clone();
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest Clone() {
      return new AuthenticateRequest(this);
    }

    /// <summary>Field number for the "collationId" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.Email Email {
      get { return payloadCase_ == PayloadOneofCase.Email ? (global::Nakama.AuthenticateRequest.Types.Email) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return payloadCase_ == PayloadOneofCase.Facebook ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return payloadCase_ == PayloadOneofCase.Google ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.GameCenter GameCenter {
      get { return payloadCase_ == PayloadOneofCase.GameCenter ? (global::Nakama.AuthenticateRequest.Types.GameCenter) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return payloadCase_ == PayloadOneofCase.Steam ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return payloadCase_ == PayloadOneofCase.Device ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return payloadCase_ == PayloadOneofCase.Custom ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Custom;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Email = 2,
      Facebook = 3,
      Google = 4,
      GameCenter = 5,
      Steam = 6,
      Device = 7,
      Custom = 8,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Email, other.Email)) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (!object.Equals(GameCenter, other.GameCenter)) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Email) hash ^= Email.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Google) hash ^= Google.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Device) hash ^= Device.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Email) {
        output.WriteRawTag(18);
        output.WriteMessage(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        output.WriteRawTag(26);
        output.WriteString(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        output.WriteRawTag(34);
        output.WriteString(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        output.WriteRawTag(42);
        output.WriteMessage(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        output.WriteRawTag(50);
        output.WriteString(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        output.WriteRawTag(58);
        output.WriteString(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        output.WriteRawTag(66);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email;
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.AuthenticateRequest.Types.Email subBuilder = new global::Nakama.AuthenticateRequest.Types.Email();
            if (payloadCase_ == PayloadOneofCase.Email) {
              subBuilder.MergeFrom(Email);
            }
            input.ReadMessage(subBuilder);
            Email = subBuilder;
            break;
          }
          case 26: {
            Facebook = input.ReadString();
            break;
          }
          case 34: {
            Google = input.ReadString();
            break;
          }
          case 42: {
            global::Nakama.AuthenticateRequest.Types.GameCenter subBuilder = new global::Nakama.AuthenticateRequest.Types.GameCenter();
            if (payloadCase_ == PayloadOneofCase.GameCenter) {
              subBuilder.MergeFrom(GameCenter);
            }
            input.ReadMessage(subBuilder);
            GameCenter = subBuilder;
            break;
          }
          case 50: {
            Steam = input.ReadString();
            break;
          }
          case 58: {
            Device = input.ReadString();
            break;
          }
          case 66: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthenticateRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Email : pb::IMessage<Email> {
        private static readonly pb::MessageParser<Email> _parser = new pb::MessageParser<Email>(() => new Email());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Email> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email(Email other) : this() {
          email_ = other.email_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email Clone() {
          return new Email(this);
        }

        /// <summary>Field number for the "email" field.</summary>
        public const int Email_FieldNumber = 1;
        private string email_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Email_ {
          get { return email_; }
          set {
            email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Email);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Email other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Email_ != other.Email_) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Email_.Length != 0) hash ^= Email_.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Email_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Email_);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Email_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Email_);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Email other) {
          if (other == null) {
            return;
          }
          if (other.Email_.Length != 0) {
            Email_ = other.Email_;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Email_ = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GameCenter : pb::IMessage<GameCenter> {
        private static readonly pb::MessageParser<GameCenter> _parser = new pb::MessageParser<GameCenter>(() => new GameCenter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameCenter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter(GameCenter other) : this() {
          playerId_ = other.playerId_;
          bundleId_ = other.bundleId_;
          timestamp_ = other.timestamp_;
          salt_ = other.salt_;
          signature_ = other.signature_;
          publicKeyUrl_ = other.publicKeyUrl_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter Clone() {
          return new GameCenter(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private string playerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerId {
          get { return playerId_; }
          set {
            playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bundle_id" field.</summary>
        public const int BundleIdFieldNumber = 2;
        private string bundleId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BundleId {
          get { return bundleId_; }
          set {
            bundleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "salt" field.</summary>
        public const int SaltFieldNumber = 4;
        private string salt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Salt {
          get { return salt_; }
          set {
            salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 5;
        private string signature_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Signature {
          get { return signature_; }
          set {
            signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "public_key_url" field.</summary>
        public const int PublicKeyUrlFieldNumber = 6;
        private string publicKeyUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PublicKeyUrl {
          get { return publicKeyUrl_; }
          set {
            publicKeyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameCenter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameCenter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (BundleId != other.BundleId) return false;
          if (Timestamp != other.Timestamp) return false;
          if (Salt != other.Salt) return false;
          if (Signature != other.Signature) return false;
          if (PublicKeyUrl != other.PublicKeyUrl) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
          if (BundleId.Length != 0) hash ^= BundleId.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (Salt.Length != 0) hash ^= Salt.GetHashCode();
          if (Signature.Length != 0) hash ^= Signature.GetHashCode();
          if (PublicKeyUrl.Length != 0) hash ^= PublicKeyUrl.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PlayerId);
          }
          if (BundleId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(BundleId);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Timestamp);
          }
          if (Salt.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Salt);
          }
          if (Signature.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Signature);
          }
          if (PublicKeyUrl.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(PublicKeyUrl);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
          }
          if (BundleId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleId);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (Salt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Salt);
          }
          if (Signature.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
          }
          if (PublicKeyUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKeyUrl);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameCenter other) {
          if (other == null) {
            return;
          }
          if (other.PlayerId.Length != 0) {
            PlayerId = other.PlayerId;
          }
          if (other.BundleId.Length != 0) {
            BundleId = other.BundleId;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.Salt.Length != 0) {
            Salt = other.Salt;
          }
          if (other.Signature.Length != 0) {
            Signature = other.Signature;
          }
          if (other.PublicKeyUrl.Length != 0) {
            PublicKeyUrl = other.PublicKeyUrl;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PlayerId = input.ReadString();
                break;
              }
              case 18: {
                BundleId = input.ReadString();
                break;
              }
              case 24: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 34: {
                Salt = input.ReadString();
                break;
              }
              case 42: {
                Signature = input.ReadString();
                break;
              }
              case 50: {
                PublicKeyUrl = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AuthenticateResponse : pb::IMessage<AuthenticateResponse> {
    private static readonly pb::MessageParser<AuthenticateResponse> _parser = new pb::MessageParser<AuthenticateResponse>(() => new AuthenticateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse(AuthenticateResponse other) : this() {
      collationId_ = other.collationId_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Session:
          Session = other.Session.Clone();
          break;
        case PayloadOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse Clone() {
      return new AuthenticateResponse(this);
    }

    /// <summary>Field number for the "collation_id" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateResponse.Types.Session Session {
      get { return payloadCase_ == PayloadOneofCase.Session ? (global::Nakama.AuthenticateResponse.Types.Session) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Session;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateResponse.Types.Error Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (global::Nakama.AuthenticateResponse.Types.Error) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Error;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Session = 2,
      Error = 3,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Session) hash ^= Session.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Session) {
        output.WriteRawTag(18);
        output.WriteMessage(Session);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Session) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateResponse other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Session:
          Session = other.Session;
          break;
        case PayloadOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.AuthenticateResponse.Types.Session subBuilder = new global::Nakama.AuthenticateResponse.Types.Session();
            if (payloadCase_ == PayloadOneofCase.Session) {
              subBuilder.MergeFrom(Session);
            }
            input.ReadMessage(subBuilder);
            Session = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.AuthenticateResponse.Types.Error subBuilder = new global::Nakama.AuthenticateResponse.Types.Error();
            if (payloadCase_ == PayloadOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthenticateResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Session : pb::IMessage<Session> {
        private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Session> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session(Session other) : this() {
          token_ = other.token_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session Clone() {
          return new Session(this);
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 1;
        private string token_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Token {
          get { return token_; }
          set {
            token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Session);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Session other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Token != other.Token) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Token.Length != 0) hash ^= Token.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Token.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Token);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Token.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Session other) {
          if (other == null) {
            return;
          }
          if (other.Token.Length != 0) {
            Token = other.Token;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Token = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          code_ = other.code_;
          message_ = other.message_;
          Request = other.request_ != null ? other.Request.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;
        private int code_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Code {
          get { return code_; }
          set {
            code_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "request" field.</summary>
        public const int RequestFieldNumber = 3;
        private global::Nakama.AuthenticateRequest request_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.AuthenticateRequest Request {
          get { return request_; }
          set {
            request_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Code != other.Code) return false;
          if (Message != other.Message) return false;
          if (!object.Equals(Request, other.Request)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Code != 0) hash ^= Code.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (request_ != null) hash ^= Request.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Code != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Code);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (request_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Request);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Code != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (request_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Code != 0) {
            Code = other.Code;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.request_ != null) {
            if (request_ == null) {
              request_ = new global::Nakama.AuthenticateRequest();
            }
            Request.MergeFrom(other.Request);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Code = input.ReadInt32();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 26: {
                if (request_ == null) {
                  request_ = new global::Nakama.AuthenticateRequest();
                }
                input.ReadMessage(request_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      collationId_ = other.collationId_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case PayloadOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case PayloadOneofCase.Logout:
          Logout = other.Logout.Clone();
          break;
        case PayloadOneofCase.Link:
          Link = other.Link.Clone();
          break;
        case PayloadOneofCase.Unlink:
          Unlink = other.Unlink.Clone();
          break;
        case PayloadOneofCase.SelfFetch:
          SelfFetch = other.SelfFetch.Clone();
          break;
        case PayloadOneofCase.SelfUpdate:
          SelfUpdate = other.SelfUpdate.Clone();
          break;
        case PayloadOneofCase.UsersFetch:
          UsersFetch = other.UsersFetch.Clone();
          break;
        case PayloadOneofCase.Self:
          Self = other.Self.Clone();
          break;
        case PayloadOneofCase.Users:
          Users = other.Users.Clone();
          break;
        case PayloadOneofCase.FriendAdd:
          FriendAdd = other.FriendAdd.Clone();
          break;
        case PayloadOneofCase.FriendRemove:
          FriendRemove = other.FriendRemove.Clone();
          break;
        case PayloadOneofCase.FriendBlock:
          FriendBlock = other.FriendBlock.Clone();
          break;
        case PayloadOneofCase.FriendsList:
          FriendsList = other.FriendsList.Clone();
          break;
        case PayloadOneofCase.Friends:
          Friends = other.Friends.Clone();
          break;
        case PayloadOneofCase.GroupCreate:
          GroupCreate = other.GroupCreate.Clone();
          break;
        case PayloadOneofCase.GroupUpdate:
          GroupUpdate = other.GroupUpdate.Clone();
          break;
        case PayloadOneofCase.GroupRemove:
          GroupRemove = other.GroupRemove.Clone();
          break;
        case PayloadOneofCase.GroupsFetch:
          GroupsFetch = other.GroupsFetch.Clone();
          break;
        case PayloadOneofCase.GroupsList:
          GroupsList = other.GroupsList.Clone();
          break;
        case PayloadOneofCase.GroupsSelfList:
          GroupsSelfList = other.GroupsSelfList.Clone();
          break;
        case PayloadOneofCase.GroupUsersList:
          GroupUsersList = other.GroupUsersList.Clone();
          break;
        case PayloadOneofCase.GroupJoin:
          GroupJoin = other.GroupJoin.Clone();
          break;
        case PayloadOneofCase.GroupLeave:
          GroupLeave = other.GroupLeave.Clone();
          break;
        case PayloadOneofCase.GroupUserAdd:
          GroupUserAdd = other.GroupUserAdd.Clone();
          break;
        case PayloadOneofCase.GroupUserKick:
          GroupUserKick = other.GroupUserKick.Clone();
          break;
        case PayloadOneofCase.GroupUserPromote:
          GroupUserPromote = other.GroupUserPromote.Clone();
          break;
        case PayloadOneofCase.Group:
          Group = other.Group.Clone();
          break;
        case PayloadOneofCase.Groups:
          Groups = other.Groups.Clone();
          break;
        case PayloadOneofCase.GroupUsers:
          GroupUsers = other.GroupUsers.Clone();
          break;
        case PayloadOneofCase.TopicJoin:
          TopicJoin = other.TopicJoin.Clone();
          break;
        case PayloadOneofCase.TopicLeave:
          TopicLeave = other.TopicLeave.Clone();
          break;
        case PayloadOneofCase.TopicMessageSend:
          TopicMessageSend = other.TopicMessageSend.Clone();
          break;
        case PayloadOneofCase.TopicMessagesList:
          TopicMessagesList = other.TopicMessagesList.Clone();
          break;
        case PayloadOneofCase.Topic:
          Topic = other.Topic.Clone();
          break;
        case PayloadOneofCase.TopicMessageAck:
          TopicMessageAck = other.TopicMessageAck.Clone();
          break;
        case PayloadOneofCase.TopicMessage:
          TopicMessage = other.TopicMessage.Clone();
          break;
        case PayloadOneofCase.TopicMessages:
          TopicMessages = other.TopicMessages.Clone();
          break;
        case PayloadOneofCase.TopicPresence:
          TopicPresence = other.TopicPresence.Clone();
          break;
        case PayloadOneofCase.MatchCreate:
          MatchCreate = other.MatchCreate.Clone();
          break;
        case PayloadOneofCase.MatchJoin:
          MatchJoin = other.MatchJoin.Clone();
          break;
        case PayloadOneofCase.MatchLeave:
          MatchLeave = other.MatchLeave.Clone();
          break;
        case PayloadOneofCase.MatchDataSend:
          MatchDataSend = other.MatchDataSend.Clone();
          break;
        case PayloadOneofCase.Match:
          Match = other.Match.Clone();
          break;
        case PayloadOneofCase.MatchData:
          MatchData = other.MatchData.Clone();
          break;
        case PayloadOneofCase.MatchPresence:
          MatchPresence = other.MatchPresence.Clone();
          break;
        case PayloadOneofCase.StorageFetch:
          StorageFetch = other.StorageFetch.Clone();
          break;
        case PayloadOneofCase.StorageWrite:
          StorageWrite = other.StorageWrite.Clone();
          break;
        case PayloadOneofCase.StorageRemove:
          StorageRemove = other.StorageRemove.Clone();
          break;
        case PayloadOneofCase.StorageData:
          StorageData = other.StorageData.Clone();
          break;
        case PayloadOneofCase.StorageKey:
          StorageKey = other.StorageKey.Clone();
          break;
        case PayloadOneofCase.LeaderboardsList:
          LeaderboardsList = other.LeaderboardsList.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordWrite:
          LeaderboardRecordWrite = other.LeaderboardRecordWrite.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordsFetch:
          LeaderboardRecordsFetch = other.LeaderboardRecordsFetch.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordsList:
          LeaderboardRecordsList = other.LeaderboardRecordsList.Clone();
          break;
        case PayloadOneofCase.Leaderboards:
          Leaderboards = other.Leaderboards.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecord:
          LeaderboardRecord = other.LeaderboardRecord.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecords:
          LeaderboardRecords = other.LeaderboardRecords.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "collation_id" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Error Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (global::Nakama.Error) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Error;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Heartbeat Heartbeat {
      get { return payloadCase_ == PayloadOneofCase.Heartbeat ? (global::Nakama.Heartbeat) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "logout" field.</summary>
    public const int LogoutFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Logout Logout {
      get { return payloadCase_ == PayloadOneofCase.Logout ? (global::Nakama.Logout) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Logout;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLink Link {
      get { return payloadCase_ == PayloadOneofCase.Link ? (global::Nakama.TLink) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Link;
      }
    }

    /// <summary>Field number for the "unlink" field.</summary>
    public const int UnlinkFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUnlink Unlink {
      get { return payloadCase_ == PayloadOneofCase.Unlink ? (global::Nakama.TUnlink) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Unlink;
      }
    }

    /// <summary>Field number for the "self_fetch" field.</summary>
    public const int SelfFetchFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelfFetch SelfFetch {
      get { return payloadCase_ == PayloadOneofCase.SelfFetch ? (global::Nakama.TSelfFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SelfFetch;
      }
    }

    /// <summary>Field number for the "self_update" field.</summary>
    public const int SelfUpdateFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelfUpdate SelfUpdate {
      get { return payloadCase_ == PayloadOneofCase.SelfUpdate ? (global::Nakama.TSelfUpdate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SelfUpdate;
      }
    }

    /// <summary>Field number for the "users_fetch" field.</summary>
    public const int UsersFetchFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUsersFetch UsersFetch {
      get { return payloadCase_ == PayloadOneofCase.UsersFetch ? (global::Nakama.TUsersFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UsersFetch;
      }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelf Self {
      get { return payloadCase_ == PayloadOneofCase.Self ? (global::Nakama.TSelf) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Self;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUsers Users {
      get { return payloadCase_ == PayloadOneofCase.Users ? (global::Nakama.TUsers) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Users;
      }
    }

    /// <summary>Field number for the "friend_add" field.</summary>
    public const int FriendAddFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendAdd FriendAdd {
      get { return payloadCase_ == PayloadOneofCase.FriendAdd ? (global::Nakama.TFriendAdd) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendAdd;
      }
    }

    /// <summary>Field number for the "friend_remove" field.</summary>
    public const int FriendRemoveFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendRemove FriendRemove {
      get { return payloadCase_ == PayloadOneofCase.FriendRemove ? (global::Nakama.TFriendRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendRemove;
      }
    }

    /// <summary>Field number for the "friend_block" field.</summary>
    public const int FriendBlockFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendBlock FriendBlock {
      get { return payloadCase_ == PayloadOneofCase.FriendBlock ? (global::Nakama.TFriendBlock) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendBlock;
      }
    }

    /// <summary>Field number for the "friends_list" field.</summary>
    public const int FriendsListFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendsList FriendsList {
      get { return payloadCase_ == PayloadOneofCase.FriendsList ? (global::Nakama.TFriendsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendsList;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriends Friends {
      get { return payloadCase_ == PayloadOneofCase.Friends ? (global::Nakama.TFriends) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Friends;
      }
    }

    /// <summary>Field number for the "group_create" field.</summary>
    public const int GroupCreateFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupCreate GroupCreate {
      get { return payloadCase_ == PayloadOneofCase.GroupCreate ? (global::Nakama.TGroupCreate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupCreate;
      }
    }

    /// <summary>Field number for the "group_update" field.</summary>
    public const int GroupUpdateFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUpdate GroupUpdate {
      get { return payloadCase_ == PayloadOneofCase.GroupUpdate ? (global::Nakama.TGroupUpdate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUpdate;
      }
    }

    /// <summary>Field number for the "group_remove" field.</summary>
    public const int GroupRemoveFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupRemove GroupRemove {
      get { return payloadCase_ == PayloadOneofCase.GroupRemove ? (global::Nakama.TGroupRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupRemove;
      }
    }

    /// <summary>Field number for the "groups_fetch" field.</summary>
    public const int GroupsFetchFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsFetch GroupsFetch {
      get { return payloadCase_ == PayloadOneofCase.GroupsFetch ? (global::Nakama.TGroupsFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsFetch;
      }
    }

    /// <summary>Field number for the "groups_list" field.</summary>
    public const int GroupsListFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsList GroupsList {
      get { return payloadCase_ == PayloadOneofCase.GroupsList ? (global::Nakama.TGroupsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsList;
      }
    }

    /// <summary>Field number for the "groups_self_list" field.</summary>
    public const int GroupsSelfListFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsSelfList GroupsSelfList {
      get { return payloadCase_ == PayloadOneofCase.GroupsSelfList ? (global::Nakama.TGroupsSelfList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsSelfList;
      }
    }

    /// <summary>Field number for the "group_users_list" field.</summary>
    public const int GroupUsersListFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsersList GroupUsersList {
      get { return payloadCase_ == PayloadOneofCase.GroupUsersList ? (global::Nakama.TGroupUsersList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsersList;
      }
    }

    /// <summary>Field number for the "group_join" field.</summary>
    public const int GroupJoinFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupJoin GroupJoin {
      get { return payloadCase_ == PayloadOneofCase.GroupJoin ? (global::Nakama.TGroupJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupJoin;
      }
    }

    /// <summary>Field number for the "group_leave" field.</summary>
    public const int GroupLeaveFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupLeave GroupLeave {
      get { return payloadCase_ == PayloadOneofCase.GroupLeave ? (global::Nakama.TGroupLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupLeave;
      }
    }

    /// <summary>Field number for the "group_user_add" field.</summary>
    public const int GroupUserAddFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUserAdd GroupUserAdd {
      get { return payloadCase_ == PayloadOneofCase.GroupUserAdd ? (global::Nakama.TGroupUserAdd) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUserAdd;
      }
    }

    /// <summary>Field number for the "group_user_kick" field.</summary>
    public const int GroupUserKickFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUserKick GroupUserKick {
      get { return payloadCase_ == PayloadOneofCase.GroupUserKick ? (global::Nakama.TGroupUserKick) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUserKick;
      }
    }

    /// <summary>Field number for the "group_user_promote" field.</summary>
    public const int GroupUserPromoteFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUserPromote GroupUserPromote {
      get { return payloadCase_ == PayloadOneofCase.GroupUserPromote ? (global::Nakama.TGroupUserPromote) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUserPromote;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroup Group {
      get { return payloadCase_ == PayloadOneofCase.Group ? (global::Nakama.TGroup) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Group;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroups Groups {
      get { return payloadCase_ == PayloadOneofCase.Groups ? (global::Nakama.TGroups) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Groups;
      }
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsers GroupUsers {
      get { return payloadCase_ == PayloadOneofCase.GroupUsers ? (global::Nakama.TGroupUsers) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsers;
      }
    }

    /// <summary>Field number for the "topic_join" field.</summary>
    public const int TopicJoinFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicJoin TopicJoin {
      get { return payloadCase_ == PayloadOneofCase.TopicJoin ? (global::Nakama.TTopicJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicJoin;
      }
    }

    /// <summary>Field number for the "topic_leave" field.</summary>
    public const int TopicLeaveFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicLeave TopicLeave {
      get { return payloadCase_ == PayloadOneofCase.TopicLeave ? (global::Nakama.TTopicLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicLeave;
      }
    }

    /// <summary>Field number for the "topic_message_send" field.</summary>
    public const int TopicMessageSendFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessageSend TopicMessageSend {
      get { return payloadCase_ == PayloadOneofCase.TopicMessageSend ? (global::Nakama.TTopicMessageSend) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessageSend;
      }
    }

    /// <summary>Field number for the "topic_messages_list" field.</summary>
    public const int TopicMessagesListFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessagesList TopicMessagesList {
      get { return payloadCase_ == PayloadOneofCase.TopicMessagesList ? (global::Nakama.TTopicMessagesList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessagesList;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopic Topic {
      get { return payloadCase_ == PayloadOneofCase.Topic ? (global::Nakama.TTopic) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Topic;
      }
    }

    /// <summary>Field number for the "topic_message_ack" field.</summary>
    public const int TopicMessageAckFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessageAck TopicMessageAck {
      get { return payloadCase_ == PayloadOneofCase.TopicMessageAck ? (global::Nakama.TTopicMessageAck) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessageAck;
      }
    }

    /// <summary>Field number for the "topic_message" field.</summary>
    public const int TopicMessageFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicMessage TopicMessage {
      get { return payloadCase_ == PayloadOneofCase.TopicMessage ? (global::Nakama.TopicMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessage;
      }
    }

    /// <summary>Field number for the "topic_messages" field.</summary>
    public const int TopicMessagesFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessages TopicMessages {
      get { return payloadCase_ == PayloadOneofCase.TopicMessages ? (global::Nakama.TTopicMessages) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessages;
      }
    }

    /// <summary>Field number for the "topic_presence" field.</summary>
    public const int TopicPresenceFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicPresence TopicPresence {
      get { return payloadCase_ == PayloadOneofCase.TopicPresence ? (global::Nakama.TopicPresence) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicPresence;
      }
    }

    /// <summary>Field number for the "match_create" field.</summary>
    public const int MatchCreateFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchCreate MatchCreate {
      get { return payloadCase_ == PayloadOneofCase.MatchCreate ? (global::Nakama.TMatchCreate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchCreate;
      }
    }

    /// <summary>Field number for the "match_join" field.</summary>
    public const int MatchJoinFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchJoin MatchJoin {
      get { return payloadCase_ == PayloadOneofCase.MatchJoin ? (global::Nakama.TMatchJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchJoin;
      }
    }

    /// <summary>Field number for the "match_leave" field.</summary>
    public const int MatchLeaveFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchLeave MatchLeave {
      get { return payloadCase_ == PayloadOneofCase.MatchLeave ? (global::Nakama.TMatchLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchLeave;
      }
    }

    /// <summary>Field number for the "match_data_send" field.</summary>
    public const int MatchDataSendFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchDataSend MatchDataSend {
      get { return payloadCase_ == PayloadOneofCase.MatchDataSend ? (global::Nakama.TMatchDataSend) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchDataSend;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatch Match {
      get { return payloadCase_ == PayloadOneofCase.Match ? (global::Nakama.TMatch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Match;
      }
    }

    /// <summary>Field number for the "match_data" field.</summary>
    public const int MatchDataFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchData MatchData {
      get { return payloadCase_ == PayloadOneofCase.MatchData ? (global::Nakama.MatchData) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchData;
      }
    }

    /// <summary>Field number for the "match_presence" field.</summary>
    public const int MatchPresenceFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchPresence MatchPresence {
      get { return payloadCase_ == PayloadOneofCase.MatchPresence ? (global::Nakama.MatchPresence) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchPresence;
      }
    }

    /// <summary>Field number for the "storage_fetch" field.</summary>
    public const int StorageFetchFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageFetch StorageFetch {
      get { return payloadCase_ == PayloadOneofCase.StorageFetch ? (global::Nakama.TStorageFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageFetch;
      }
    }

    /// <summary>Field number for the "storage_write" field.</summary>
    public const int StorageWriteFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageWrite StorageWrite {
      get { return payloadCase_ == PayloadOneofCase.StorageWrite ? (global::Nakama.TStorageWrite) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageWrite;
      }
    }

    /// <summary>Field number for the "storage_remove" field.</summary>
    public const int StorageRemoveFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageRemove StorageRemove {
      get { return payloadCase_ == PayloadOneofCase.StorageRemove ? (global::Nakama.TStorageRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageRemove;
      }
    }

    /// <summary>Field number for the "storage_data" field.</summary>
    public const int StorageDataFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageData StorageData {
      get { return payloadCase_ == PayloadOneofCase.StorageData ? (global::Nakama.TStorageData) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageData;
      }
    }

    /// <summary>Field number for the "storage_key" field.</summary>
    public const int StorageKeyFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageKey StorageKey {
      get { return payloadCase_ == PayloadOneofCase.StorageKey ? (global::Nakama.TStorageKey) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageKey;
      }
    }

    /// <summary>Field number for the "leaderboards_list" field.</summary>
    public const int LeaderboardsListFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardsList LeaderboardsList {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardsList ? (global::Nakama.TLeaderboardsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardsList;
      }
    }

    /// <summary>Field number for the "leaderboard_record_write" field.</summary>
    public const int LeaderboardRecordWriteFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordWrite LeaderboardRecordWrite {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordWrite ? (global::Nakama.TLeaderboardRecordWrite) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordWrite;
      }
    }

    /// <summary>Field number for the "leaderboard_records_fetch" field.</summary>
    public const int LeaderboardRecordsFetchFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsFetch LeaderboardRecordsFetch {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch ? (global::Nakama.TLeaderboardRecordsFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordsFetch;
      }
    }

    /// <summary>Field number for the "leaderboard_records_list" field.</summary>
    public const int LeaderboardRecordsListFieldNumber = 56;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsList LeaderboardRecordsList {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordsList ? (global::Nakama.TLeaderboardRecordsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordsList;
      }
    }

    /// <summary>Field number for the "leaderboards" field.</summary>
    public const int LeaderboardsFieldNumber = 57;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboards Leaderboards {
      get { return payloadCase_ == PayloadOneofCase.Leaderboards ? (global::Nakama.TLeaderboards) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Leaderboards;
      }
    }

    /// <summary>Field number for the "leaderboard_record" field.</summary>
    public const int LeaderboardRecordFieldNumber = 58;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecord LeaderboardRecord {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecord ? (global::Nakama.TLeaderboardRecord) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecord;
      }
    }

    /// <summary>Field number for the "leaderboard_records" field.</summary>
    public const int LeaderboardRecordsFieldNumber = 59;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecords LeaderboardRecords {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecords ? (global::Nakama.TLeaderboardRecords) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecords;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Error = 2,
      Heartbeat = 3,
      Logout = 4,
      Link = 5,
      Unlink = 6,
      SelfFetch = 7,
      SelfUpdate = 8,
      UsersFetch = 9,
      Self = 10,
      Users = 11,
      FriendAdd = 12,
      FriendRemove = 13,
      FriendBlock = 14,
      FriendsList = 15,
      Friends = 16,
      GroupCreate = 17,
      GroupUpdate = 18,
      GroupRemove = 19,
      GroupsFetch = 20,
      GroupsList = 21,
      GroupsSelfList = 22,
      GroupUsersList = 23,
      GroupJoin = 24,
      GroupLeave = 25,
      GroupUserAdd = 26,
      GroupUserKick = 27,
      GroupUserPromote = 28,
      Group = 29,
      Groups = 30,
      GroupUsers = 31,
      TopicJoin = 32,
      TopicLeave = 33,
      TopicMessageSend = 34,
      TopicMessagesList = 35,
      Topic = 36,
      TopicMessageAck = 37,
      TopicMessage = 38,
      TopicMessages = 39,
      TopicPresence = 40,
      MatchCreate = 41,
      MatchJoin = 42,
      MatchLeave = 43,
      MatchDataSend = 44,
      Match = 45,
      MatchData = 46,
      MatchPresence = 47,
      StorageFetch = 48,
      StorageWrite = 49,
      StorageRemove = 50,
      StorageData = 51,
      StorageKey = 52,
      LeaderboardsList = 53,
      LeaderboardRecordWrite = 54,
      LeaderboardRecordsFetch = 55,
      LeaderboardRecordsList = 56,
      Leaderboards = 57,
      LeaderboardRecord = 58,
      LeaderboardRecords = 59,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Logout, other.Logout)) return false;
      if (!object.Equals(Link, other.Link)) return false;
      if (!object.Equals(Unlink, other.Unlink)) return false;
      if (!object.Equals(SelfFetch, other.SelfFetch)) return false;
      if (!object.Equals(SelfUpdate, other.SelfUpdate)) return false;
      if (!object.Equals(UsersFetch, other.UsersFetch)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (!object.Equals(Users, other.Users)) return false;
      if (!object.Equals(FriendAdd, other.FriendAdd)) return false;
      if (!object.Equals(FriendRemove, other.FriendRemove)) return false;
      if (!object.Equals(FriendBlock, other.FriendBlock)) return false;
      if (!object.Equals(FriendsList, other.FriendsList)) return false;
      if (!object.Equals(Friends, other.Friends)) return false;
      if (!object.Equals(GroupCreate, other.GroupCreate)) return false;
      if (!object.Equals(GroupUpdate, other.GroupUpdate)) return false;
      if (!object.Equals(GroupRemove, other.GroupRemove)) return false;
      if (!object.Equals(GroupsFetch, other.GroupsFetch)) return false;
      if (!object.Equals(GroupsList, other.GroupsList)) return false;
      if (!object.Equals(GroupsSelfList, other.GroupsSelfList)) return false;
      if (!object.Equals(GroupUsersList, other.GroupUsersList)) return false;
      if (!object.Equals(GroupJoin, other.GroupJoin)) return false;
      if (!object.Equals(GroupLeave, other.GroupLeave)) return false;
      if (!object.Equals(GroupUserAdd, other.GroupUserAdd)) return false;
      if (!object.Equals(GroupUserKick, other.GroupUserKick)) return false;
      if (!object.Equals(GroupUserPromote, other.GroupUserPromote)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (!object.Equals(Groups, other.Groups)) return false;
      if (!object.Equals(GroupUsers, other.GroupUsers)) return false;
      if (!object.Equals(TopicJoin, other.TopicJoin)) return false;
      if (!object.Equals(TopicLeave, other.TopicLeave)) return false;
      if (!object.Equals(TopicMessageSend, other.TopicMessageSend)) return false;
      if (!object.Equals(TopicMessagesList, other.TopicMessagesList)) return false;
      if (!object.Equals(Topic, other.Topic)) return false;
      if (!object.Equals(TopicMessageAck, other.TopicMessageAck)) return false;
      if (!object.Equals(TopicMessage, other.TopicMessage)) return false;
      if (!object.Equals(TopicMessages, other.TopicMessages)) return false;
      if (!object.Equals(TopicPresence, other.TopicPresence)) return false;
      if (!object.Equals(MatchCreate, other.MatchCreate)) return false;
      if (!object.Equals(MatchJoin, other.MatchJoin)) return false;
      if (!object.Equals(MatchLeave, other.MatchLeave)) return false;
      if (!object.Equals(MatchDataSend, other.MatchDataSend)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(MatchData, other.MatchData)) return false;
      if (!object.Equals(MatchPresence, other.MatchPresence)) return false;
      if (!object.Equals(StorageFetch, other.StorageFetch)) return false;
      if (!object.Equals(StorageWrite, other.StorageWrite)) return false;
      if (!object.Equals(StorageRemove, other.StorageRemove)) return false;
      if (!object.Equals(StorageData, other.StorageData)) return false;
      if (!object.Equals(StorageKey, other.StorageKey)) return false;
      if (!object.Equals(LeaderboardsList, other.LeaderboardsList)) return false;
      if (!object.Equals(LeaderboardRecordWrite, other.LeaderboardRecordWrite)) return false;
      if (!object.Equals(LeaderboardRecordsFetch, other.LeaderboardRecordsFetch)) return false;
      if (!object.Equals(LeaderboardRecordsList, other.LeaderboardRecordsList)) return false;
      if (!object.Equals(Leaderboards, other.Leaderboards)) return false;
      if (!object.Equals(LeaderboardRecord, other.LeaderboardRecord)) return false;
      if (!object.Equals(LeaderboardRecords, other.LeaderboardRecords)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Logout) hash ^= Logout.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Link) hash ^= Link.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Unlink) hash ^= Unlink.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SelfFetch) hash ^= SelfFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) hash ^= SelfUpdate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.UsersFetch) hash ^= UsersFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Self) hash ^= Self.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Users) hash ^= Users.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendAdd) hash ^= FriendAdd.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendRemove) hash ^= FriendRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendBlock) hash ^= FriendBlock.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendsList) hash ^= FriendsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Friends) hash ^= Friends.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupCreate) hash ^= GroupCreate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUpdate) hash ^= GroupUpdate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupRemove) hash ^= GroupRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) hash ^= GroupsFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsList) hash ^= GroupsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) hash ^= GroupsSelfList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) hash ^= GroupUsersList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupJoin) hash ^= GroupJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupLeave) hash ^= GroupLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUserAdd) hash ^= GroupUserAdd.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUserKick) hash ^= GroupUserKick.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUserPromote) hash ^= GroupUserPromote.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Group) hash ^= Group.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Groups) hash ^= Groups.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsers) hash ^= GroupUsers.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicJoin) hash ^= TopicJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicLeave) hash ^= TopicLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) hash ^= TopicMessageSend.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) hash ^= TopicMessagesList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Topic) hash ^= Topic.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) hash ^= TopicMessageAck.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessage) hash ^= TopicMessage.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessages) hash ^= TopicMessages.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicPresence) hash ^= TopicPresence.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchCreate) hash ^= MatchCreate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchJoin) hash ^= MatchJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchLeave) hash ^= MatchLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) hash ^= MatchDataSend.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Match) hash ^= Match.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchData) hash ^= MatchData.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchPresence) hash ^= MatchPresence.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageFetch) hash ^= StorageFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageWrite) hash ^= StorageWrite.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageRemove) hash ^= StorageRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageData) hash ^= StorageData.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageKey) hash ^= StorageKey.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) hash ^= LeaderboardsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordWrite) hash ^= LeaderboardRecordWrite.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) hash ^= LeaderboardRecordsFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) hash ^= LeaderboardRecordsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Leaderboards) hash ^= Leaderboards.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecord) hash ^= LeaderboardRecord.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) hash ^= LeaderboardRecords.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        output.WriteRawTag(26);
        output.WriteMessage(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Logout) {
        output.WriteRawTag(34);
        output.WriteMessage(Logout);
      }
      if (payloadCase_ == PayloadOneofCase.Link) {
        output.WriteRawTag(42);
        output.WriteMessage(Link);
      }
      if (payloadCase_ == PayloadOneofCase.Unlink) {
        output.WriteRawTag(50);
        output.WriteMessage(Unlink);
      }
      if (payloadCase_ == PayloadOneofCase.SelfFetch) {
        output.WriteRawTag(58);
        output.WriteMessage(SelfFetch);
      }
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(SelfUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.UsersFetch) {
        output.WriteRawTag(74);
        output.WriteMessage(UsersFetch);
      }
      if (payloadCase_ == PayloadOneofCase.Self) {
        output.WriteRawTag(82);
        output.WriteMessage(Self);
      }
      if (payloadCase_ == PayloadOneofCase.Users) {
        output.WriteRawTag(90);
        output.WriteMessage(Users);
      }
      if (payloadCase_ == PayloadOneofCase.FriendAdd) {
        output.WriteRawTag(98);
        output.WriteMessage(FriendAdd);
      }
      if (payloadCase_ == PayloadOneofCase.FriendRemove) {
        output.WriteRawTag(106);
        output.WriteMessage(FriendRemove);
      }
      if (payloadCase_ == PayloadOneofCase.FriendBlock) {
        output.WriteRawTag(114);
        output.WriteMessage(FriendBlock);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsList) {
        output.WriteRawTag(122);
        output.WriteMessage(FriendsList);
      }
      if (payloadCase_ == PayloadOneofCase.Friends) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Friends);
      }
      if (payloadCase_ == PayloadOneofCase.GroupCreate) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GroupCreate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUpdate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(GroupUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupRemove) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GroupRemove);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GroupsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsList) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GroupsList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GroupsSelfList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GroupUsersList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupJoin) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(GroupJoin);
      }
      if (payloadCase_ == PayloadOneofCase.GroupLeave) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(GroupLeave);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserAdd) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(GroupUserAdd);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserKick) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(GroupUserKick);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserPromote) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(GroupUserPromote);
      }
      if (payloadCase_ == PayloadOneofCase.Group) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Group);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Groups);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsers) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(GroupUsers);
      }
      if (payloadCase_ == PayloadOneofCase.TopicJoin) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TopicJoin);
      }
      if (payloadCase_ == PayloadOneofCase.TopicLeave) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TopicLeave);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TopicMessageSend);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TopicMessagesList);
      }
      if (payloadCase_ == PayloadOneofCase.Topic) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Topic);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TopicMessageAck);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessage) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(TopicMessage);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessages) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(TopicMessages);
      }
      if (payloadCase_ == PayloadOneofCase.TopicPresence) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(TopicPresence);
      }
      if (payloadCase_ == PayloadOneofCase.MatchCreate) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(MatchCreate);
      }
      if (payloadCase_ == PayloadOneofCase.MatchJoin) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MatchJoin);
      }
      if (payloadCase_ == PayloadOneofCase.MatchLeave) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(MatchLeave);
      }
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(MatchDataSend);
      }
      if (payloadCase_ == PayloadOneofCase.Match) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(Match);
      }
      if (payloadCase_ == PayloadOneofCase.MatchData) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(MatchData);
      }
      if (payloadCase_ == PayloadOneofCase.MatchPresence) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(MatchPresence);
      }
      if (payloadCase_ == PayloadOneofCase.StorageFetch) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(StorageFetch);
      }
      if (payloadCase_ == PayloadOneofCase.StorageWrite) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(StorageWrite);
      }
      if (payloadCase_ == PayloadOneofCase.StorageRemove) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(StorageRemove);
      }
      if (payloadCase_ == PayloadOneofCase.StorageData) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(StorageData);
      }
      if (payloadCase_ == PayloadOneofCase.StorageKey) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(StorageKey);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(LeaderboardsList);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordWrite) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(LeaderboardRecordWrite);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(LeaderboardRecordsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(LeaderboardRecordsList);
      }
      if (payloadCase_ == PayloadOneofCase.Leaderboards) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(Leaderboards);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecord) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(LeaderboardRecord);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(LeaderboardRecords);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Logout) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logout);
      }
      if (payloadCase_ == PayloadOneofCase.Link) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
      }
      if (payloadCase_ == PayloadOneofCase.Unlink) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unlink);
      }
      if (payloadCase_ == PayloadOneofCase.SelfFetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfFetch);
      }
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.UsersFetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsersFetch);
      }
      if (payloadCase_ == PayloadOneofCase.Self) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (payloadCase_ == PayloadOneofCase.Users) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Users);
      }
      if (payloadCase_ == PayloadOneofCase.FriendAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendAdd);
      }
      if (payloadCase_ == PayloadOneofCase.FriendRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendRemove);
      }
      if (payloadCase_ == PayloadOneofCase.FriendBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendBlock);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsList);
      }
      if (payloadCase_ == PayloadOneofCase.Friends) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Friends);
      }
      if (payloadCase_ == PayloadOneofCase.GroupCreate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupCreate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupRemove);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsSelfList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsersList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupJoin);
      }
      if (payloadCase_ == PayloadOneofCase.GroupLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupLeave);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserAdd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUserAdd);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserKick) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUserKick);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUserPromote) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUserPromote);
      }
      if (payloadCase_ == PayloadOneofCase.Group) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Groups);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsers) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsers);
      }
      if (payloadCase_ == PayloadOneofCase.TopicJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicJoin);
      }
      if (payloadCase_ == PayloadOneofCase.TopicLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicLeave);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessageSend);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessagesList);
      }
      if (payloadCase_ == PayloadOneofCase.Topic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessageAck);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessage);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessages) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessages);
      }
      if (payloadCase_ == PayloadOneofCase.TopicPresence) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicPresence);
      }
      if (payloadCase_ == PayloadOneofCase.MatchCreate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCreate);
      }
      if (payloadCase_ == PayloadOneofCase.MatchJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchJoin);
      }
      if (payloadCase_ == PayloadOneofCase.MatchLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchLeave);
      }
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchDataSend);
      }
      if (payloadCase_ == PayloadOneofCase.Match) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (payloadCase_ == PayloadOneofCase.MatchData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchData);
      }
      if (payloadCase_ == PayloadOneofCase.MatchPresence) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchPresence);
      }
      if (payloadCase_ == PayloadOneofCase.StorageFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageFetch);
      }
      if (payloadCase_ == PayloadOneofCase.StorageWrite) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageWrite);
      }
      if (payloadCase_ == PayloadOneofCase.StorageRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageRemove);
      }
      if (payloadCase_ == PayloadOneofCase.StorageData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageData);
      }
      if (payloadCase_ == PayloadOneofCase.StorageKey) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageKey);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardsList);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordWrite) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordWrite);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordsList);
      }
      if (payloadCase_ == PayloadOneofCase.Leaderboards) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Leaderboards);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecord);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecords);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          Error = other.Error;
          break;
        case PayloadOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat;
          break;
        case PayloadOneofCase.Logout:
          Logout = other.Logout;
          break;
        case PayloadOneofCase.Link:
          Link = other.Link;
          break;
        case PayloadOneofCase.Unlink:
          Unlink = other.Unlink;
          break;
        case PayloadOneofCase.SelfFetch:
          SelfFetch = other.SelfFetch;
          break;
        case PayloadOneofCase.SelfUpdate:
          SelfUpdate = other.SelfUpdate;
          break;
        case PayloadOneofCase.UsersFetch:
          UsersFetch = other.UsersFetch;
          break;
        case PayloadOneofCase.Self:
          Self = other.Self;
          break;
        case PayloadOneofCase.Users:
          Users = other.Users;
          break;
        case PayloadOneofCase.FriendAdd:
          FriendAdd = other.FriendAdd;
          break;
        case PayloadOneofCase.FriendRemove:
          FriendRemove = other.FriendRemove;
          break;
        case PayloadOneofCase.FriendBlock:
          FriendBlock = other.FriendBlock;
          break;
        case PayloadOneofCase.FriendsList:
          FriendsList = other.FriendsList;
          break;
        case PayloadOneofCase.Friends:
          Friends = other.Friends;
          break;
        case PayloadOneofCase.GroupCreate:
          GroupCreate = other.GroupCreate;
          break;
        case PayloadOneofCase.GroupUpdate:
          GroupUpdate = other.GroupUpdate;
          break;
        case PayloadOneofCase.GroupRemove:
          GroupRemove = other.GroupRemove;
          break;
        case PayloadOneofCase.GroupsFetch:
          GroupsFetch = other.GroupsFetch;
          break;
        case PayloadOneofCase.GroupsList:
          GroupsList = other.GroupsList;
          break;
        case PayloadOneofCase.GroupsSelfList:
          GroupsSelfList = other.GroupsSelfList;
          break;
        case PayloadOneofCase.GroupUsersList:
          GroupUsersList = other.GroupUsersList;
          break;
        case PayloadOneofCase.GroupJoin:
          GroupJoin = other.GroupJoin;
          break;
        case PayloadOneofCase.GroupLeave:
          GroupLeave = other.GroupLeave;
          break;
        case PayloadOneofCase.GroupUserAdd:
          GroupUserAdd = other.GroupUserAdd;
          break;
        case PayloadOneofCase.GroupUserKick:
          GroupUserKick = other.GroupUserKick;
          break;
        case PayloadOneofCase.GroupUserPromote:
          GroupUserPromote = other.GroupUserPromote;
          break;
        case PayloadOneofCase.Group:
          Group = other.Group;
          break;
        case PayloadOneofCase.Groups:
          Groups = other.Groups;
          break;
        case PayloadOneofCase.GroupUsers:
          GroupUsers = other.GroupUsers;
          break;
        case PayloadOneofCase.TopicJoin:
          TopicJoin = other.TopicJoin;
          break;
        case PayloadOneofCase.TopicLeave:
          TopicLeave = other.TopicLeave;
          break;
        case PayloadOneofCase.TopicMessageSend:
          TopicMessageSend = other.TopicMessageSend;
          break;
        case PayloadOneofCase.TopicMessagesList:
          TopicMessagesList = other.TopicMessagesList;
          break;
        case PayloadOneofCase.Topic:
          Topic = other.Topic;
          break;
        case PayloadOneofCase.TopicMessageAck:
          TopicMessageAck = other.TopicMessageAck;
          break;
        case PayloadOneofCase.TopicMessage:
          TopicMessage = other.TopicMessage;
          break;
        case PayloadOneofCase.TopicMessages:
          TopicMessages = other.TopicMessages;
          break;
        case PayloadOneofCase.TopicPresence:
          TopicPresence = other.TopicPresence;
          break;
        case PayloadOneofCase.MatchCreate:
          MatchCreate = other.MatchCreate;
          break;
        case PayloadOneofCase.MatchJoin:
          MatchJoin = other.MatchJoin;
          break;
        case PayloadOneofCase.MatchLeave:
          MatchLeave = other.MatchLeave;
          break;
        case PayloadOneofCase.MatchDataSend:
          MatchDataSend = other.MatchDataSend;
          break;
        case PayloadOneofCase.Match:
          Match = other.Match;
          break;
        case PayloadOneofCase.MatchData:
          MatchData = other.MatchData;
          break;
        case PayloadOneofCase.MatchPresence:
          MatchPresence = other.MatchPresence;
          break;
        case PayloadOneofCase.StorageFetch:
          StorageFetch = other.StorageFetch;
          break;
        case PayloadOneofCase.StorageWrite:
          StorageWrite = other.StorageWrite;
          break;
        case PayloadOneofCase.StorageRemove:
          StorageRemove = other.StorageRemove;
          break;
        case PayloadOneofCase.StorageData:
          StorageData = other.StorageData;
          break;
        case PayloadOneofCase.StorageKey:
          StorageKey = other.StorageKey;
          break;
        case PayloadOneofCase.LeaderboardsList:
          LeaderboardsList = other.LeaderboardsList;
          break;
        case PayloadOneofCase.LeaderboardRecordWrite:
          LeaderboardRecordWrite = other.LeaderboardRecordWrite;
          break;
        case PayloadOneofCase.LeaderboardRecordsFetch:
          LeaderboardRecordsFetch = other.LeaderboardRecordsFetch;
          break;
        case PayloadOneofCase.LeaderboardRecordsList:
          LeaderboardRecordsList = other.LeaderboardRecordsList;
          break;
        case PayloadOneofCase.Leaderboards:
          Leaderboards = other.Leaderboards;
          break;
        case PayloadOneofCase.LeaderboardRecord:
          LeaderboardRecord = other.LeaderboardRecord;
          break;
        case PayloadOneofCase.LeaderboardRecords:
          LeaderboardRecords = other.LeaderboardRecords;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.Error subBuilder = new global::Nakama.Error();
            if (payloadCase_ == PayloadOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.Heartbeat subBuilder = new global::Nakama.Heartbeat();
            if (payloadCase_ == PayloadOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 34: {
            global::Nakama.Logout subBuilder = new global::Nakama.Logout();
            if (payloadCase_ == PayloadOneofCase.Logout) {
              subBuilder.MergeFrom(Logout);
            }
            input.ReadMessage(subBuilder);
            Logout = subBuilder;
            break;
          }
          case 42: {
            global::Nakama.TLink subBuilder = new global::Nakama.TLink();
            if (payloadCase_ == PayloadOneofCase.Link) {
              subBuilder.MergeFrom(Link);
            }
            input.ReadMessage(subBuilder);
            Link = subBuilder;
            break;
          }
          case 50: {
            global::Nakama.TUnlink subBuilder = new global::Nakama.TUnlink();
            if (payloadCase_ == PayloadOneofCase.Unlink) {
              subBuilder.MergeFrom(Unlink);
            }
            input.ReadMessage(subBuilder);
            Unlink = subBuilder;
            break;
          }
          case 58: {
            global::Nakama.TSelfFetch subBuilder = new global::Nakama.TSelfFetch();
            if (payloadCase_ == PayloadOneofCase.SelfFetch) {
              subBuilder.MergeFrom(SelfFetch);
            }
            input.ReadMessage(subBuilder);
            SelfFetch = subBuilder;
            break;
          }
          case 66: {
            global::Nakama.TSelfUpdate subBuilder = new global::Nakama.TSelfUpdate();
            if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
              subBuilder.MergeFrom(SelfUpdate);
            }
            input.ReadMessage(subBuilder);
            SelfUpdate = subBuilder;
            break;
          }
          case 74: {
            global::Nakama.TUsersFetch subBuilder = new global::Nakama.TUsersFetch();
            if (payloadCase_ == PayloadOneofCase.UsersFetch) {
              subBuilder.MergeFrom(UsersFetch);
            }
            input.ReadMessage(subBuilder);
            UsersFetch = subBuilder;
            break;
          }
          case 82: {
            global::Nakama.TSelf subBuilder = new global::Nakama.TSelf();
            if (payloadCase_ == PayloadOneofCase.Self) {
              subBuilder.MergeFrom(Self);
            }
            input.ReadMessage(subBuilder);
            Self = subBuilder;
            break;
          }
          case 90: {
            global::Nakama.TUsers subBuilder = new global::Nakama.TUsers();
            if (payloadCase_ == PayloadOneofCase.Users) {
              subBuilder.MergeFrom(Users);
            }
            input.ReadMessage(subBuilder);
            Users = subBuilder;
            break;
          }
          case 98: {
            global::Nakama.TFriendAdd subBuilder = new global::Nakama.TFriendAdd();
            if (payloadCase_ == PayloadOneofCase.FriendAdd) {
              subBuilder.MergeFrom(FriendAdd);
            }
            input.ReadMessage(subBuilder);
            FriendAdd = subBuilder;
            break;
          }
          case 106: {
            global::Nakama.TFriendRemove subBuilder = new global::Nakama.TFriendRemove();
            if (payloadCase_ == PayloadOneofCase.FriendRemove) {
              subBuilder.MergeFrom(FriendRemove);
            }
            input.ReadMessage(subBuilder);
            FriendRemove = subBuilder;
            break;
          }
          case 114: {
            global::Nakama.TFriendBlock subBuilder = new global::Nakama.TFriendBlock();
            if (payloadCase_ == PayloadOneofCase.FriendBlock) {
              subBuilder.MergeFrom(FriendBlock);
            }
            input.ReadMessage(subBuilder);
            FriendBlock = subBuilder;
            break;
          }
          case 122: {
            global::Nakama.TFriendsList subBuilder = new global::Nakama.TFriendsList();
            if (payloadCase_ == PayloadOneofCase.FriendsList) {
              subBuilder.MergeFrom(FriendsList);
            }
            input.ReadMessage(subBuilder);
            FriendsList = subBuilder;
            break;
          }
          case 130: {
            global::Nakama.TFriends subBuilder = new global::Nakama.TFriends();
            if (payloadCase_ == PayloadOneofCase.Friends) {
              subBuilder.MergeFrom(Friends);
            }
            input.ReadMessage(subBuilder);
            Friends = subBuilder;
            break;
          }
          case 138: {
            global::Nakama.TGroupCreate subBuilder = new global::Nakama.TGroupCreate();
            if (payloadCase_ == PayloadOneofCase.GroupCreate) {
              subBuilder.MergeFrom(GroupCreate);
            }
            input.ReadMessage(subBuilder);
            GroupCreate = subBuilder;
            break;
          }
          case 146: {
            global::Nakama.TGroupUpdate subBuilder = new global::Nakama.TGroupUpdate();
            if (payloadCase_ == PayloadOneofCase.GroupUpdate) {
              subBuilder.MergeFrom(GroupUpdate);
            }
            input.ReadMessage(subBuilder);
            GroupUpdate = subBuilder;
            break;
          }
          case 154: {
            global::Nakama.TGroupRemove subBuilder = new global::Nakama.TGroupRemove();
            if (payloadCase_ == PayloadOneofCase.GroupRemove) {
              subBuilder.MergeFrom(GroupRemove);
            }
            input.ReadMessage(subBuilder);
            GroupRemove = subBuilder;
            break;
          }
          case 162: {
            global::Nakama.TGroupsFetch subBuilder = new global::Nakama.TGroupsFetch();
            if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
              subBuilder.MergeFrom(GroupsFetch);
            }
            input.ReadMessage(subBuilder);
            GroupsFetch = subBuilder;
            break;
          }
          case 170: {
            global::Nakama.TGroupsList subBuilder = new global::Nakama.TGroupsList();
            if (payloadCase_ == PayloadOneofCase.GroupsList) {
              subBuilder.MergeFrom(GroupsList);
            }
            input.ReadMessage(subBuilder);
            GroupsList = subBuilder;
            break;
          }
          case 178: {
            global::Nakama.TGroupsSelfList subBuilder = new global::Nakama.TGroupsSelfList();
            if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
              subBuilder.MergeFrom(GroupsSelfList);
            }
            input.ReadMessage(subBuilder);
            GroupsSelfList = subBuilder;
            break;
          }
          case 186: {
            global::Nakama.TGroupUsersList subBuilder = new global::Nakama.TGroupUsersList();
            if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
              subBuilder.MergeFrom(GroupUsersList);
            }
            input.ReadMessage(subBuilder);
            GroupUsersList = subBuilder;
            break;
          }
          case 194: {
            global::Nakama.TGroupJoin subBuilder = new global::Nakama.TGroupJoin();
            if (payloadCase_ == PayloadOneofCase.GroupJoin) {
              subBuilder.MergeFrom(GroupJoin);
            }
            input.ReadMessage(subBuilder);
            GroupJoin = subBuilder;
            break;
          }
          case 202: {
            global::Nakama.TGroupLeave subBuilder = new global::Nakama.TGroupLeave();
            if (payloadCase_ == PayloadOneofCase.GroupLeave) {
              subBuilder.MergeFrom(GroupLeave);
            }
            input.ReadMessage(subBuilder);
            GroupLeave = subBuilder;
            break;
          }
          case 210: {
            global::Nakama.TGroupUserAdd subBuilder = new global::Nakama.TGroupUserAdd();
            if (payloadCase_ == PayloadOneofCase.GroupUserAdd) {
              subBuilder.MergeFrom(GroupUserAdd);
            }
            input.ReadMessage(subBuilder);
            GroupUserAdd = subBuilder;
            break;
          }
          case 218: {
            global::Nakama.TGroupUserKick subBuilder = new global::Nakama.TGroupUserKick();
            if (payloadCase_ == PayloadOneofCase.GroupUserKick) {
              subBuilder.MergeFrom(GroupUserKick);
            }
            input.ReadMessage(subBuilder);
            GroupUserKick = subBuilder;
            break;
          }
          case 226: {
            global::Nakama.TGroupUserPromote subBuilder = new global::Nakama.TGroupUserPromote();
            if (payloadCase_ == PayloadOneofCase.GroupUserPromote) {
              subBuilder.MergeFrom(GroupUserPromote);
            }
            input.ReadMessage(subBuilder);
            GroupUserPromote = subBuilder;
            break;
          }
          case 234: {
            global::Nakama.TGroup subBuilder = new global::Nakama.TGroup();
            if (payloadCase_ == PayloadOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
          case 242: {
            global::Nakama.TGroups subBuilder = new global::Nakama.TGroups();
            if (payloadCase_ == PayloadOneofCase.Groups) {
              subBuilder.MergeFrom(Groups);
            }
            input.ReadMessage(subBuilder);
            Groups = subBuilder;
            break;
          }
          case 250: {
            global::Nakama.TGroupUsers subBuilder = new global::Nakama.TGroupUsers();
            if (payloadCase_ == PayloadOneofCase.GroupUsers) {
              subBuilder.MergeFrom(GroupUsers);
            }
            input.ReadMessage(subBuilder);
            GroupUsers = subBuilder;
            break;
          }
          case 258: {
            global::Nakama.TTopicJoin subBuilder = new global::Nakama.TTopicJoin();
            if (payloadCase_ == PayloadOneofCase.TopicJoin) {
              subBuilder.MergeFrom(TopicJoin);
            }
            input.ReadMessage(subBuilder);
            TopicJoin = subBuilder;
            break;
          }
          case 266: {
            global::Nakama.TTopicLeave subBuilder = new global::Nakama.TTopicLeave();
            if (payloadCase_ == PayloadOneofCase.TopicLeave) {
              subBuilder.MergeFrom(TopicLeave);
            }
            input.ReadMessage(subBuilder);
            TopicLeave = subBuilder;
            break;
          }
          case 274: {
            global::Nakama.TTopicMessageSend subBuilder = new global::Nakama.TTopicMessageSend();
            if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
              subBuilder.MergeFrom(TopicMessageSend);
            }
            input.ReadMessage(subBuilder);
            TopicMessageSend = subBuilder;
            break;
          }
          case 282: {
            global::Nakama.TTopicMessagesList subBuilder = new global::Nakama.TTopicMessagesList();
            if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
              subBuilder.MergeFrom(TopicMessagesList);
            }
            input.ReadMessage(subBuilder);
            TopicMessagesList = subBuilder;
            break;
          }
          case 290: {
            global::Nakama.TTopic subBuilder = new global::Nakama.TTopic();
            if (payloadCase_ == PayloadOneofCase.Topic) {
              subBuilder.MergeFrom(Topic);
            }
            input.ReadMessage(subBuilder);
            Topic = subBuilder;
            break;
          }
          case 298: {
            global::Nakama.TTopicMessageAck subBuilder = new global::Nakama.TTopicMessageAck();
            if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
              subBuilder.MergeFrom(TopicMessageAck);
            }
            input.ReadMessage(subBuilder);
            TopicMessageAck = subBuilder;
            break;
          }
          case 306: {
            global::Nakama.TopicMessage subBuilder = new global::Nakama.TopicMessage();
            if (payloadCase_ == PayloadOneofCase.TopicMessage) {
              subBuilder.MergeFrom(TopicMessage);
            }
            input.ReadMessage(subBuilder);
            TopicMessage = subBuilder;
            break;
          }
          case 314: {
            global::Nakama.TTopicMessages subBuilder = new global::Nakama.TTopicMessages();
            if (payloadCase_ == PayloadOneofCase.TopicMessages) {
              subBuilder.MergeFrom(TopicMessages);
            }
            input.ReadMessage(subBuilder);
            TopicMessages = subBuilder;
            break;
          }
          case 322: {
            global::Nakama.TopicPresence subBuilder = new global::Nakama.TopicPresence();
            if (payloadCase_ == PayloadOneofCase.TopicPresence) {
              subBuilder.MergeFrom(TopicPresence);
            }
            input.ReadMessage(subBuilder);
            TopicPresence = subBuilder;
            break;
          }
          case 330: {
            global::Nakama.TMatchCreate subBuilder = new global::Nakama.TMatchCreate();
            if (payloadCase_ == PayloadOneofCase.MatchCreate) {
              subBuilder.MergeFrom(MatchCreate);
            }
            input.ReadMessage(subBuilder);
            MatchCreate = subBuilder;
            break;
          }
          case 338: {
            global::Nakama.TMatchJoin subBuilder = new global::Nakama.TMatchJoin();
            if (payloadCase_ == PayloadOneofCase.MatchJoin) {
              subBuilder.MergeFrom(MatchJoin);
            }
            input.ReadMessage(subBuilder);
            MatchJoin = subBuilder;
            break;
          }
          case 346: {
            global::Nakama.TMatchLeave subBuilder = new global::Nakama.TMatchLeave();
            if (payloadCase_ == PayloadOneofCase.MatchLeave) {
              subBuilder.MergeFrom(MatchLeave);
            }
            input.ReadMessage(subBuilder);
            MatchLeave = subBuilder;
            break;
          }
          case 354: {
            global::Nakama.TMatchDataSend subBuilder = new global::Nakama.TMatchDataSend();
            if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
              subBuilder.MergeFrom(MatchDataSend);
            }
            input.ReadMessage(subBuilder);
            MatchDataSend = subBuilder;
            break;
          }
          case 362: {
            global::Nakama.TMatch subBuilder = new global::Nakama.TMatch();
            if (payloadCase_ == PayloadOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
          case 370: {
            global::Nakama.MatchData subBuilder = new global::Nakama.MatchData();
            if (payloadCase_ == PayloadOneofCase.MatchData) {
              subBuilder.MergeFrom(MatchData);
            }
            input.ReadMessage(subBuilder);
            MatchData = subBuilder;
            break;
          }
          case 378: {
            global::Nakama.MatchPresence subBuilder = new global::Nakama.MatchPresence();
            if (payloadCase_ == PayloadOneofCase.MatchPresence) {
              subBuilder.MergeFrom(MatchPresence);
            }
            input.ReadMessage(subBuilder);
            MatchPresence = subBuilder;
            break;
          }
          case 386: {
            global::Nakama.TStorageFetch subBuilder = new global::Nakama.TStorageFetch();
            if (payloadCase_ == PayloadOneofCase.StorageFetch) {
              subBuilder.MergeFrom(StorageFetch);
            }
            input.ReadMessage(subBuilder);
            StorageFetch = subBuilder;
            break;
          }
          case 394: {
            global::Nakama.TStorageWrite subBuilder = new global::Nakama.TStorageWrite();
            if (payloadCase_ == PayloadOneofCase.StorageWrite) {
              subBuilder.MergeFrom(StorageWrite);
            }
            input.ReadMessage(subBuilder);
            StorageWrite = subBuilder;
            break;
          }
          case 402: {
            global::Nakama.TStorageRemove subBuilder = new global::Nakama.TStorageRemove();
            if (payloadCase_ == PayloadOneofCase.StorageRemove) {
              subBuilder.MergeFrom(StorageRemove);
            }
            input.ReadMessage(subBuilder);
            StorageRemove = subBuilder;
            break;
          }
          case 410: {
            global::Nakama.TStorageData subBuilder = new global::Nakama.TStorageData();
            if (payloadCase_ == PayloadOneofCase.StorageData) {
              subBuilder.MergeFrom(StorageData);
            }
            input.ReadMessage(subBuilder);
            StorageData = subBuilder;
            break;
          }
          case 418: {
            global::Nakama.TStorageKey subBuilder = new global::Nakama.TStorageKey();
            if (payloadCase_ == PayloadOneofCase.StorageKey) {
              subBuilder.MergeFrom(StorageKey);
            }
            input.ReadMessage(subBuilder);
            StorageKey = subBuilder;
            break;
          }
          case 426: {
            global::Nakama.TLeaderboardsList subBuilder = new global::Nakama.TLeaderboardsList();
            if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
              subBuilder.MergeFrom(LeaderboardsList);
            }
            input.ReadMessage(subBuilder);
            LeaderboardsList = subBuilder;
            break;
          }
          case 434: {
            global::Nakama.TLeaderboardRecordWrite subBuilder = new global::Nakama.TLeaderboardRecordWrite();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordWrite) {
              subBuilder.MergeFrom(LeaderboardRecordWrite);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordWrite = subBuilder;
            break;
          }
          case 442: {
            global::Nakama.TLeaderboardRecordsFetch subBuilder = new global::Nakama.TLeaderboardRecordsFetch();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
              subBuilder.MergeFrom(LeaderboardRecordsFetch);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordsFetch = subBuilder;
            break;
          }
          case 450: {
            global::Nakama.TLeaderboardRecordsList subBuilder = new global::Nakama.TLeaderboardRecordsList();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
              subBuilder.MergeFrom(LeaderboardRecordsList);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordsList = subBuilder;
            break;
          }
          case 458: {
            global::Nakama.TLeaderboards subBuilder = new global::Nakama.TLeaderboards();
            if (payloadCase_ == PayloadOneofCase.Leaderboards) {
              subBuilder.MergeFrom(Leaderboards);
            }
            input.ReadMessage(subBuilder);
            Leaderboards = subBuilder;
            break;
          }
          case 466: {
            global::Nakama.TLeaderboardRecord subBuilder = new global::Nakama.TLeaderboardRecord();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecord) {
              subBuilder.MergeFrom(LeaderboardRecord);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecord = subBuilder;
            break;
          }
          case 474: {
            global::Nakama.TLeaderboardRecords subBuilder = new global::Nakama.TLeaderboardRecords();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
              subBuilder.MergeFrom(LeaderboardRecords);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecords = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Logout : pb::IMessage<Logout> {
    private static readonly pb::MessageParser<Logout> _parser = new pb::MessageParser<Logout>(() => new Logout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout(Logout other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout Clone() {
      return new Logout(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logout other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Link expects same input as an authentication.
  /// </summary>
  public sealed partial class TLink : pb::IMessage<TLink> {
    private static readonly pb::MessageParser<TLink> _parser = new pb::MessageParser<TLink>(() => new TLink());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink(TLink other) : this() {
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email.Clone();
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter.Clone();
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink Clone() {
      return new TLink(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.Email Email {
      get { return payloadCase_ == PayloadOneofCase.Email ? (global::Nakama.AuthenticateRequest.Types.Email) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return payloadCase_ == PayloadOneofCase.Facebook ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return payloadCase_ == PayloadOneofCase.Google ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.GameCenter GameCenter {
      get { return payloadCase_ == PayloadOneofCase.GameCenter ? (global::Nakama.AuthenticateRequest.Types.GameCenter) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return payloadCase_ == PayloadOneofCase.Steam ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return payloadCase_ == PayloadOneofCase.Device ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return payloadCase_ == PayloadOneofCase.Custom ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Custom;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Email = 1,
      Facebook = 2,
      Google = 3,
      GameCenter = 4,
      Steam = 5,
      Device = 6,
      Custom = 7,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Email, other.Email)) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (!object.Equals(GameCenter, other.GameCenter)) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadCase_ == PayloadOneofCase.Email) hash ^= Email.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Google) hash ^= Google.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Device) hash ^= Device.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.Email) {
        output.WriteRawTag(10);
        output.WriteMessage(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        output.WriteRawTag(18);
        output.WriteString(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        output.WriteRawTag(26);
        output.WriteString(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        output.WriteRawTag(34);
        output.WriteMessage(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        output.WriteRawTag(42);
        output.WriteString(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        output.WriteRawTag(58);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payloadCase_ == PayloadOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLink other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email;
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Nakama.AuthenticateRequest.Types.Email subBuilder = new global::Nakama.AuthenticateRequest.Types.Email();
            if (payloadCase_ == PayloadOneofCase.Email) {
              subBuilder.MergeFrom(Email);
            }
            input.ReadMessage(subBuilder);
            Email = subBuilder;
            break;
          }
          case 18: {
            Facebook = input.ReadString();
            break;
          }
          case 26: {
            Google = input.ReadString();
            break;
          }
          case 34: {
            global::Nakama.AuthenticateRequest.Types.GameCenter subBuilder = new global::Nakama.AuthenticateRequest.Types.GameCenter();
            if (payloadCase_ == PayloadOneofCase.GameCenter) {
              subBuilder.MergeFrom(GameCenter);
            }
            input.ReadMessage(subBuilder);
            GameCenter = subBuilder;
            break;
          }
          case 42: {
            Steam = input.ReadString();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Unlink allows direct IDs, no tokens needed.
  /// </summary>
  public sealed partial class TUnlink : pb::IMessage<TUnlink> {
    private static readonly pb::MessageParser<TUnlink> _parser = new pb::MessageParser<TUnlink>(() => new TUnlink());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUnlink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink(TUnlink other) : this() {
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email;
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink Clone() {
      return new TUnlink(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return payloadCase_ == PayloadOneofCase.Email ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return payloadCase_ == PayloadOneofCase.Facebook ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return payloadCase_ == PayloadOneofCase.Google ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameCenter {
      get { return payloadCase_ == PayloadOneofCase.GameCenter ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return payloadCase_ == PayloadOneofCase.Steam ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return payloadCase_ == PayloadOneofCase.Device ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return payloadCase_ == PayloadOneofCase.Custom ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Custom;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Email = 1,
      Facebook = 2,
      Google = 3,
      GameCenter = 4,
      Steam = 5,
      Device = 6,
      Custom = 7,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUnlink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUnlink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (GameCenter != other.GameCenter) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadCase_ == PayloadOneofCase.Email) hash ^= Email.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Google) hash ^= Google.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Device) hash ^= Device.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.Email) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        output.WriteRawTag(18);
        output.WriteString(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        output.WriteRawTag(26);
        output.WriteString(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        output.WriteRawTag(34);
        output.WriteString(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        output.WriteRawTag(42);
        output.WriteString(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        output.WriteRawTag(58);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payloadCase_ == PayloadOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (payloadCase_ == PayloadOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (payloadCase_ == PayloadOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (payloadCase_ == PayloadOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCenter);
      }
      if (payloadCase_ == PayloadOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (payloadCase_ == PayloadOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (payloadCase_ == PayloadOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUnlink other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Email:
          Email = other.Email;
          break;
        case PayloadOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case PayloadOneofCase.Google:
          Google = other.Google;
          break;
        case PayloadOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case PayloadOneofCase.Steam:
          Steam = other.Steam;
          break;
        case PayloadOneofCase.Device:
          Device = other.Device;
          break;
        case PayloadOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Facebook = input.ReadString();
            break;
          }
          case 26: {
            Google = input.ReadString();
            break;
          }
          case 34: {
            GameCenter = input.ReadString();
            break;
          }
          case 42: {
            Steam = input.ReadString();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      handle_ = other.handle_;
      fullname_ = other.fullname_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      metadata_ = other.metadata_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      lastOnlineAt_ = other.lastOnlineAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullname" field.</summary>
    public const int FullnameFieldNumber = 3;
    private string fullname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullname {
      get { return fullname_; }
      set {
        fullname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 5;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 7;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 9;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 10;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "last_online_at" field.</summary>
    public const int LastOnlineAtFieldNumber = 11;
    private long lastOnlineAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastOnlineAt {
      get { return lastOnlineAt_; }
      set {
        lastOnlineAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Handle != other.Handle) return false;
      if (Fullname != other.Fullname) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Metadata != other.Metadata) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (LastOnlineAt != other.LastOnlineAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (LastOnlineAt != 0L) hash ^= LastOnlineAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (Fullname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fullname);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lang);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timezone);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Metadata);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UpdatedAt);
      }
      if (LastOnlineAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(LastOnlineAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Fullname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (LastOnlineAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastOnlineAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Fullname.Length != 0) {
        Fullname = other.Fullname;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.LastOnlineAt != 0L) {
        LastOnlineAt = other.LastOnlineAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 26: {
            Fullname = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            Lang = input.ReadString();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 58: {
            Timezone = input.ReadString();
            break;
          }
          case 66: {
            Metadata = input.ReadBytes();
            break;
          }
          case 72: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 80: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 88: {
            LastOnlineAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Self : pb::IMessage<Self> {
    private static readonly pb::MessageParser<Self> _parser = new pb::MessageParser<Self>(() => new Self());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Self> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self(Self other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      verified_ = other.verified_;
      email_ = other.email_;
      deviceId_ = other.deviceId_.Clone();
      facebookId_ = other.facebookId_;
      googleId_ = other.googleId_;
      gamecenterId_ = other.gamecenterId_;
      steamId_ = other.steamId_;
      customId_ = other.customId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self Clone() {
      return new Self(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 2;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_deviceId_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> deviceId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceId {
      get { return deviceId_; }
    }

    /// <summary>Field number for the "facebook_id" field.</summary>
    public const int FacebookIdFieldNumber = 5;
    private string facebookId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacebookId {
      get { return facebookId_; }
      set {
        facebookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "google_id" field.</summary>
    public const int GoogleIdFieldNumber = 6;
    private string googleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoogleId {
      get { return googleId_; }
      set {
        googleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamecenter_id" field.</summary>
    public const int GamecenterIdFieldNumber = 7;
    private string gamecenterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GamecenterId {
      get { return gamecenterId_; }
      set {
        gamecenterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 8;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_id" field.</summary>
    public const int CustomIdFieldNumber = 9;
    private string customId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomId {
      get { return customId_; }
      set {
        customId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Self);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Self other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Verified != other.Verified) return false;
      if (Email != other.Email) return false;
      if(!deviceId_.Equals(other.deviceId_)) return false;
      if (FacebookId != other.FacebookId) return false;
      if (GoogleId != other.GoogleId) return false;
      if (GamecenterId != other.GamecenterId) return false;
      if (SteamId != other.SteamId) return false;
      if (CustomId != other.CustomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= deviceId_.GetHashCode();
      if (FacebookId.Length != 0) hash ^= FacebookId.GetHashCode();
      if (GoogleId.Length != 0) hash ^= GoogleId.GetHashCode();
      if (GamecenterId.Length != 0) hash ^= GamecenterId.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (CustomId.Length != 0) hash ^= CustomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Verified != false) {
        output.WriteRawTag(16);
        output.WriteBool(Verified);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      deviceId_.WriteTo(output, _repeated_deviceId_codec);
      if (FacebookId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FacebookId);
      }
      if (GoogleId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GamecenterId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SteamId);
      }
      if (CustomId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CustomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += deviceId_.CalculateSize(_repeated_deviceId_codec);
      if (FacebookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookId);
      }
      if (GoogleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GamecenterId);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (CustomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Self other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      deviceId_.Add(other.deviceId_);
      if (other.FacebookId.Length != 0) {
        FacebookId = other.FacebookId;
      }
      if (other.GoogleId.Length != 0) {
        GoogleId = other.GoogleId;
      }
      if (other.GamecenterId.Length != 0) {
        GamecenterId = other.GamecenterId;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.CustomId.Length != 0) {
        CustomId = other.CustomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            Verified = input.ReadBool();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            deviceId_.AddEntriesFrom(input, _repeated_deviceId_codec);
            break;
          }
          case 42: {
            FacebookId = input.ReadString();
            break;
          }
          case 50: {
            GoogleId = input.ReadString();
            break;
          }
          case 58: {
            GamecenterId = input.ReadString();
            break;
          }
          case 66: {
            SteamId = input.ReadString();
            break;
          }
          case 74: {
            CustomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TSelfFetch : pb::IMessage<TSelfFetch> {
    private static readonly pb::MessageParser<TSelfFetch> _parser = new pb::MessageParser<TSelfFetch>(() => new TSelfFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelfFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch(TSelfFetch other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch Clone() {
      return new TSelfFetch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelfFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelfFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelfFetch other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TSelf : pb::IMessage<TSelf> {
    private static readonly pb::MessageParser<TSelf> _parser = new pb::MessageParser<TSelf>(() => new TSelf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf(TSelf other) : this() {
      Self = other.self_ != null ? other.Self.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf Clone() {
      return new TSelf(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private global::Nakama.Self self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Self Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Self, other.Self)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_ != null) hash ^= Self.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelf other) {
      if (other == null) {
        return;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.Self();
        }
        Self.MergeFrom(other.Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (self_ == null) {
              self_ = new global::Nakama.Self();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TSelfUpdate : pb::IMessage<TSelfUpdate> {
    private static readonly pb::MessageParser<TSelfUpdate> _parser = new pb::MessageParser<TSelfUpdate>(() => new TSelfUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelfUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate(TSelfUpdate other) : this() {
      handle_ = other.handle_;
      fullname_ = other.fullname_;
      timezone_ = other.timezone_;
      location_ = other.location_;
      lang_ = other.lang_;
      metadata_ = other.metadata_;
      avatarUrl_ = other.avatarUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate Clone() {
      return new TSelfUpdate(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullname" field.</summary>
    public const int FullnameFieldNumber = 2;
    private string fullname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullname {
      get { return fullname_; }
      set {
        fullname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 3;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 5;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 7;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelfUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelfUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (Fullname != other.Fullname) return false;
      if (Timezone != other.Timezone) return false;
      if (Location != other.Location) return false;
      if (Lang != other.Lang) return false;
      if (Metadata != other.Metadata) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Handle);
      }
      if (Fullname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fullname);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Timezone);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Location);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lang);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Fullname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelfUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Fullname.Length != 0) {
        Fullname = other.Fullname;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Handle = input.ReadString();
            break;
          }
          case 18: {
            Fullname = input.ReadString();
            break;
          }
          case 26: {
            Timezone = input.ReadString();
            break;
          }
          case 34: {
            Location = input.ReadString();
            break;
          }
          case 42: {
            Lang = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 58: {
            AvatarUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TUsersFetch : pb::IMessage<TUsersFetch> {
    private static readonly pb::MessageParser<TUsersFetch> _parser = new pb::MessageParser<TUsersFetch>(() => new TUsersFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUsersFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch(TUsersFetch other) : this() {
      userIds_ = other.userIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch Clone() {
      return new TUsersFetch(this);
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_userIds_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> userIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUsersFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUsersFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userIds_.WriteTo(output, _repeated_userIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUsersFetch other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TUsers : pb::IMessage<TUsers> {
    private static readonly pb::MessageParser<TUsers> _parser = new pb::MessageParser<TUsers>(() => new TUsers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers(TUsers other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers Clone() {
      return new TUsers(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.User.Parser);
    private readonly pbc::RepeatedField<global::Nakama.User> users_ = new pbc::RepeatedField<global::Nakama.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.User> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUsers other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Friend : pb::IMessage<Friend> {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private long type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Type != 0L) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Type != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Type != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Type != 0L) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            Type = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TFriendAdd : pb::IMessage<TFriendAdd> {
    private static readonly pb::MessageParser<TFriendAdd> _parser = new pb::MessageParser<TFriendAdd>(() => new TFriendAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendAdd(TFriendAdd other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendAdd Clone() {
      return new TFriendAdd(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendAdd other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TFriendRemove : pb::IMessage<TFriendRemove> {
    private static readonly pb::MessageParser<TFriendRemove> _parser = new pb::MessageParser<TFriendRemove>(() => new TFriendRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendRemove(TFriendRemove other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendRemove Clone() {
      return new TFriendRemove(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendRemove other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TFriendBlock : pb::IMessage<TFriendBlock> {
    private static readonly pb::MessageParser<TFriendBlock> _parser = new pb::MessageParser<TFriendBlock>(() => new TFriendBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendBlock(TFriendBlock other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendBlock Clone() {
      return new TFriendBlock(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendBlock other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TFriendsList : pb::IMessage<TFriendsList> {
    private static readonly pb::MessageParser<TFriendsList> _parser = new pb::MessageParser<TFriendsList>(() => new TFriendsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList(TFriendsList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList Clone() {
      return new TFriendsList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendsList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TFriends : pb::IMessage<TFriends> {
    private static readonly pb::MessageParser<TFriends> _parser = new pb::MessageParser<TFriends>(() => new TFriends());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriends> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends(TFriends other) : this() {
      friends_ = other.friends_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends Clone() {
      return new TFriends(this);
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Friend> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Friend.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Friend> friends_ = new pbc::RepeatedField<global::Nakama.Friend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Friend> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriends);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriends other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friends_.Equals(other.friends_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friends_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriends other) {
      if (other == null) {
        return;
      }
      friends_.Add(other.friends_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Group : pb::IMessage<Group> {
    private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Group> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group(Group other) : this() {
      id_ = other.id_;
      private_ = other.private_;
      creatorId_ = other.creatorId_;
      name_ = other.name_;
      description_ = other.description_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      utcOffsetMs_ = other.utcOffsetMs_;
      metadata_ = other.metadata_;
      count_ = other.count_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group Clone() {
      return new Group(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 2;
    private bool private_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "creator_id" field.</summary>
    public const int CreatorIdFieldNumber = 3;
    private pb::ByteString creatorId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CreatorId {
      get { return creatorId_; }
      set {
        creatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 7;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "utc_offset_ms" field.</summary>
    public const int UtcOffsetMsFieldNumber = 8;
    private long utcOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UtcOffsetMs {
      get { return utcOffsetMs_; }
      set {
        utcOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 9;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 10;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 11;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 12;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Group);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Group other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Private != other.Private) return false;
      if (CreatorId != other.CreatorId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (UtcOffsetMs != other.UtcOffsetMs) return false;
      if (Metadata != other.Metadata) return false;
      if (Count != other.Count) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (CreatorId.Length != 0) hash ^= CreatorId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (UtcOffsetMs != 0L) hash ^= UtcOffsetMs.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (Private != false) {
        output.WriteRawTag(16);
        output.WriteBool(Private);
      }
      if (CreatorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CreatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Lang);
      }
      if (UtcOffsetMs != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UtcOffsetMs);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Metadata);
      }
      if (Count != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Count);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UpdatedAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (CreatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CreatorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (UtcOffsetMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcOffsetMs);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Group other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.CreatorId.Length != 0) {
        CreatorId = other.CreatorId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.UtcOffsetMs != 0L) {
        UtcOffsetMs = other.UtcOffsetMs;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Private = input.ReadBool();
            break;
          }
          case 26: {
            CreatorId = input.ReadBytes();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 58: {
            Lang = input.ReadString();
            break;
          }
          case 64: {
            UtcOffsetMs = input.ReadInt64();
            break;
          }
          case 74: {
            Metadata = input.ReadBytes();
            break;
          }
          case 80: {
            Count = input.ReadInt64();
            break;
          }
          case 88: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 96: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupCreate : pb::IMessage<TGroupCreate> {
    private static readonly pb::MessageParser<TGroupCreate> _parser = new pb::MessageParser<TGroupCreate>(() => new TGroupCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupCreate(TGroupCreate other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      metadata_ = other.metadata_;
      private_ = other.private_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupCreate Clone() {
      return new TGroupCreate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 3;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 4;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 6;
    private bool private_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (Metadata != other.Metadata) return false;
      if (Private != other.Private) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Lang);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Metadata);
      }
      if (Private != false) {
        output.WriteRawTag(48);
        output.WriteBool(Private);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupCreate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 34: {
            Lang = input.ReadString();
            break;
          }
          case 42: {
            Metadata = input.ReadBytes();
            break;
          }
          case 48: {
            Private = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroup : pb::IMessage<TGroup> {
    private static readonly pb::MessageParser<TGroup> _parser = new pb::MessageParser<TGroup>(() => new TGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroup(TGroup other) : this() {
      Group = other.group_ != null ? other.Group.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroup Clone() {
      return new TGroup(this);
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 1;
    private global::Nakama.Group group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Group Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Group, other.Group)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (group_ != null) hash ^= Group.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (group_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Group);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroup other) {
      if (other == null) {
        return;
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::Nakama.Group();
        }
        Group.MergeFrom(other.Group);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (group_ == null) {
              group_ = new global::Nakama.Group();
            }
            input.ReadMessage(group_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUpdate : pb::IMessage<TGroupUpdate> {
    private static readonly pb::MessageParser<TGroupUpdate> _parser = new pb::MessageParser<TGroupUpdate>(() => new TGroupUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUpdate(TGroupUpdate other) : this() {
      groupId_ = other.groupId_;
      private_ = other.private_;
      name_ = other.name_;
      description_ = other.description_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUpdate Clone() {
      return new TGroupUpdate(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 2;
    private bool private_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 5;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 6;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 7;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Private != other.Private) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
      if (Private != false) {
        output.WriteRawTag(16);
        output.WriteBool(Private);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Lang);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUpdate other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
          case 16: {
            Private = input.ReadBool();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 50: {
            Lang = input.ReadString();
            break;
          }
          case 58: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupRemove : pb::IMessage<TGroupRemove> {
    private static readonly pb::MessageParser<TGroupRemove> _parser = new pb::MessageParser<TGroupRemove>(() => new TGroupRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupRemove(TGroupRemove other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupRemove Clone() {
      return new TGroupRemove(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupRemove other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupsSelfList : pb::IMessage<TGroupsSelfList> {
    private static readonly pb::MessageParser<TGroupsSelfList> _parser = new pb::MessageParser<TGroupsSelfList>(() => new TGroupsSelfList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsSelfList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList(TGroupsSelfList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList Clone() {
      return new TGroupsSelfList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsSelfList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsSelfList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsSelfList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TGroupsFetch : pb::IMessage<TGroupsFetch> {
    private static readonly pb::MessageParser<TGroupsFetch> _parser = new pb::MessageParser<TGroupsFetch>(() => new TGroupsFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch(TGroupsFetch other) : this() {
      groupIds_ = other.groupIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch Clone() {
      return new TGroupsFetch(this);
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_groupIds_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> groupIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> GroupIds {
      get { return groupIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupIds_.Equals(other.groupIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsFetch other) {
      if (other == null) {
        return;
      }
      groupIds_.Add(other.groupIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupsList : pb::IMessage<TGroupsList> {
    private static readonly pb::MessageParser<TGroupsList> _parser = new pb::MessageParser<TGroupsList>(() => new TGroupsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList(TGroupsList other) : this() {
      pageLimit_ = other.pageLimit_;
      orderByAsc_ = other.orderByAsc_;
      cursor_ = other.cursor_;
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList Clone() {
      return new TGroupsList(this);
    }

    /// <summary>Field number for the "page_limit" field.</summary>
    public const int PageLimitFieldNumber = 1;
    private long pageLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageLimit {
      get { return pageLimit_; }
      set {
        pageLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_by_asc" field.</summary>
    public const int OrderByAscFieldNumber = 2;
    private bool orderByAsc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrderByAsc {
      get { return orderByAsc_; }
      set {
        orderByAsc_ = value;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 3;
    /// <summary>
    /// >= for lang variations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return filterCase_ == FilterOneofCase.Lang ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Lang;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    /// <summary>
    /// >= after the given time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return filterCase_ == FilterOneofCase.CreatedAt ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CreatedAt;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    /// <summary>
    /// up to max count, &lt;= anything less than or equal to given count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return filterCase_ == FilterOneofCase.Count ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.Count;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 7;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    /// <summary>
    /// gob(%{struct(int64/string, int64, bytes)})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      Lang = 3,
      CreatedAt = 4,
      Count = 5,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageLimit != other.PageLimit) return false;
      if (OrderByAsc != other.OrderByAsc) return false;
      if (Lang != other.Lang) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Count != other.Count) return false;
      if (Cursor != other.Cursor) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageLimit != 0L) hash ^= PageLimit.GetHashCode();
      if (OrderByAsc != false) hash ^= OrderByAsc.GetHashCode();
      if (filterCase_ == FilterOneofCase.Lang) hash ^= Lang.GetHashCode();
      if (filterCase_ == FilterOneofCase.CreatedAt) hash ^= CreatedAt.GetHashCode();
      if (filterCase_ == FilterOneofCase.Count) hash ^= Count.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageLimit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PageLimit);
      }
      if (OrderByAsc != false) {
        output.WriteRawTag(16);
        output.WriteBool(OrderByAsc);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        output.WriteRawTag(26);
        output.WriteString(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        output.WriteRawTag(40);
        output.WriteInt64(Count);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageLimit);
      }
      if (OrderByAsc != false) {
        size += 1 + 1;
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsList other) {
      if (other == null) {
        return;
      }
      if (other.PageLimit != 0L) {
        PageLimit = other.PageLimit;
      }
      if (other.OrderByAsc != false) {
        OrderByAsc = other.OrderByAsc;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageLimit = input.ReadInt64();
            break;
          }
          case 16: {
            OrderByAsc = input.ReadBool();
            break;
          }
          case 26: {
            Lang = input.ReadString();
            break;
          }
          case 32: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 40: {
            Count = input.ReadInt64();
            break;
          }
          case 58: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroups : pb::IMessage<TGroups> {
    private static readonly pb::MessageParser<TGroups> _parser = new pb::MessageParser<TGroups>(() => new TGroups());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups(TGroups other) : this() {
      groups_ = other.groups_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups Clone() {
      return new TGroups(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Group> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Group.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Group> groups_ = new pbc::RepeatedField<global::Nakama.Group>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Group> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroups other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupUser : pb::IMessage<GroupUser> {
    private static readonly pb::MessageParser<GroupUser> _parser = new pb::MessageParser<GroupUser>(() => new GroupUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser(GroupUser other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser Clone() {
      return new GroupUser(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private long type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Type != 0L) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Type != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Type != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupUser other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Type != 0L) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            Type = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUsersList : pb::IMessage<TGroupUsersList> {
    private static readonly pb::MessageParser<TGroupUsersList> _parser = new pb::MessageParser<TGroupUsersList>(() => new TGroupUsersList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsersList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList(TGroupUsersList other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList Clone() {
      return new TGroupUsersList(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsersList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsersList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsersList other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUsers : pb::IMessage<TGroupUsers> {
    private static readonly pb::MessageParser<TGroupUsers> _parser = new pb::MessageParser<TGroupUsers>(() => new TGroupUsers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers(TGroupUsers other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers Clone() {
      return new TGroupUsers(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.GroupUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.GroupUser.Parser);
    private readonly pbc::RepeatedField<global::Nakama.GroupUser> users_ = new pbc::RepeatedField<global::Nakama.GroupUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.GroupUser> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsers other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupJoin : pb::IMessage<TGroupJoin> {
    private static readonly pb::MessageParser<TGroupJoin> _parser = new pb::MessageParser<TGroupJoin>(() => new TGroupJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupJoin(TGroupJoin other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupJoin Clone() {
      return new TGroupJoin(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupJoin other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupLeave : pb::IMessage<TGroupLeave> {
    private static readonly pb::MessageParser<TGroupLeave> _parser = new pb::MessageParser<TGroupLeave>(() => new TGroupLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupLeave(TGroupLeave other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupLeave Clone() {
      return new TGroupLeave(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupLeave other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUserAdd : pb::IMessage<TGroupUserAdd> {
    private static readonly pb::MessageParser<TGroupUserAdd> _parser = new pb::MessageParser<TGroupUserAdd>(() => new TGroupUserAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUserAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserAdd(TGroupUserAdd other) : this() {
      groupId_ = other.groupId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserAdd Clone() {
      return new TGroupUserAdd(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUserAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUserAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUserAdd other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
          case 18: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUserKick : pb::IMessage<TGroupUserKick> {
    private static readonly pb::MessageParser<TGroupUserKick> _parser = new pb::MessageParser<TGroupUserKick>(() => new TGroupUserKick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUserKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserKick(TGroupUserKick other) : this() {
      groupId_ = other.groupId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserKick Clone() {
      return new TGroupUserKick(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUserKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUserKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUserKick other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
          case 18: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TGroupUserPromote : pb::IMessage<TGroupUserPromote> {
    private static readonly pb::MessageParser<TGroupUserPromote> _parser = new pb::MessageParser<TGroupUserPromote>(() => new TGroupUserPromote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUserPromote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserPromote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserPromote(TGroupUserPromote other) : this() {
      groupId_ = other.groupId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUserPromote Clone() {
      return new TGroupUserPromote(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private pb::ByteString groupId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUserPromote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUserPromote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUserPromote other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadBytes();
            break;
          }
          case 18: {
            UserId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TopicId : pb::IMessage<TopicId> {
    private static readonly pb::MessageParser<TopicId> _parser = new pb::MessageParser<TopicId>(() => new TopicId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId(TopicId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.Dm:
          Dm = other.Dm;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId Clone() {
      return new TopicId(this);
    }

    /// <summary>Field number for the "dm" field.</summary>
    public const int DmFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dm {
      get { return idCase_ == IdOneofCase.Dm ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Dm;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Room {
      get { return idCase_ == IdOneofCase.Room ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Room;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return idCase_ == IdOneofCase.GroupId ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GroupId;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Dm = 1,
      Room = 2,
      GroupId = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dm != other.Dm) return false;
      if (Room != other.Room) return false;
      if (GroupId != other.GroupId) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.Dm) hash ^= Dm.GetHashCode();
      if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
      if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.Dm) {
        output.WriteRawTag(10);
        output.WriteBytes(Dm);
      }
      if (idCase_ == IdOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteBytes(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.Dm) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dm);
      }
      if (idCase_ == IdOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.Dm:
          Dm = other.Dm;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Dm = input.ReadBytes();
            break;
          }
          case 18: {
            Room = input.ReadBytes();
            break;
          }
          case 26: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserPresence : pb::IMessage<UserPresence> {
    private static readonly pb::MessageParser<UserPresence> _parser = new pb::MessageParser<UserPresence>(() => new UserPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence(UserPresence other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence Clone() {
      return new UserPresence(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private pb::ByteString sessionId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 3;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SessionId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SessionId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPresence other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
          case 18: {
            SessionId = input.ReadBytes();
            break;
          }
          case 26: {
            Handle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicJoin : pb::IMessage<TTopicJoin> {
    private static readonly pb::MessageParser<TTopicJoin> _parser = new pb::MessageParser<TTopicJoin>(() => new TTopicJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicJoin(TTopicJoin other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicJoin Clone() {
      return new TTopicJoin(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return idCase_ == IdOneofCase.UserId ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.UserId;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Room {
      get { return idCase_ == IdOneofCase.Room ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Room;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return idCase_ == IdOneofCase.GroupId ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GroupId;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      UserId = 1,
      Room = 2,
      GroupId = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Room != other.Room) return false;
      if (GroupId != other.GroupId) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
      if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
      if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.UserId) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteBytes(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.UserId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicJoin other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
          case 18: {
            Room = input.ReadBytes();
            break;
          }
          case 26: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopic : pb::IMessage<TTopic> {
    private static readonly pb::MessageParser<TTopic> _parser = new pb::MessageParser<TTopic>(() => new TTopic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopic(TTopic other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      presences_ = other.presences_.Clone();
      Self = other.self_ != null ? other.Self.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopic Clone() {
      return new TTopic(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 3;
    private global::Nakama.UserPresence self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopic other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 26: {
            if (self_ == null) {
              self_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicLeave : pb::IMessage<TTopicLeave> {
    private static readonly pb::MessageParser<TTopicLeave> _parser = new pb::MessageParser<TTopicLeave>(() => new TTopicLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicLeave(TTopicLeave other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicLeave Clone() {
      return new TTopicLeave(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicLeave other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicMessageSend : pb::IMessage<TTopicMessageSend> {
    private static readonly pb::MessageParser<TTopicMessageSend> _parser = new pb::MessageParser<TTopicMessageSend>(() => new TTopicMessageSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessageSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend(TTopicMessageSend other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend Clone() {
      return new TTopicMessageSend(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessageSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessageSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessageSend other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicMessageAck : pb::IMessage<TTopicMessageAck> {
    private static readonly pb::MessageParser<TTopicMessageAck> _parser = new pb::MessageParser<TTopicMessageAck>(() => new TTopicMessageAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck(TTopicMessageAck other) : this() {
      messageId_ = other.messageId_;
      createdAt_ = other.createdAt_;
      expiresAt_ = other.expiresAt_;
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck Clone() {
      return new TTopicMessageAck(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private pb::ByteString messageId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 3;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 4;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MessageId);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpiresAt);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageId);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessageAck other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MessageId = input.ReadBytes();
            break;
          }
          case 16: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 34: {
            Handle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TopicMessage : pb::IMessage<TopicMessage> {
    private static readonly pb::MessageParser<TopicMessage> _parser = new pb::MessageParser<TopicMessage>(() => new TopicMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage(TopicMessage other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      userId_ = other.userId_;
      messageId_ = other.messageId_;
      createdAt_ = other.createdAt_;
      expiresAt_ = other.expiresAt_;
      handle_ = other.handle_;
      type_ = other.type_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage Clone() {
      return new TopicMessage(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private pb::ByteString userId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private pb::ByteString messageId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 5;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 6;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private long type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if (UserId != other.UserId) return false;
      if (MessageId != other.MessageId) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Handle != other.Handle) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Type != 0L) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageId);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpiresAt);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Handle);
      }
      if (Type != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageId);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Type != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicMessage other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Type != 0L) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            UserId = input.ReadBytes();
            break;
          }
          case 26: {
            MessageId = input.ReadBytes();
            break;
          }
          case 32: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 40: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 50: {
            Handle = input.ReadString();
            break;
          }
          case 56: {
            Type = input.ReadInt64();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicMessagesList : pb::IMessage<TTopicMessagesList> {
    private static readonly pb::MessageParser<TTopicMessagesList> _parser = new pb::MessageParser<TTopicMessagesList>(() => new TTopicMessagesList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessagesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList(TTopicMessagesList other) : this() {
      cursor_ = other.cursor_;
      forward_ = other.forward_;
      limit_ = other.limit_;
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList Clone() {
      return new TTopicMessagesList(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserId {
      get { return idCase_ == IdOneofCase.UserId ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.UserId;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Room {
      get { return idCase_ == IdOneofCase.Room ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Room;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return idCase_ == IdOneofCase.GroupId ? (pb::ByteString) id_ : pb::ByteString.Empty; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GroupId;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 5;
    private bool forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      UserId = 1,
      Room = 2,
      GroupId = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessagesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessagesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Room != other.Room) return false;
      if (GroupId != other.GroupId) return false;
      if (Cursor != other.Cursor) return false;
      if (Forward != other.Forward) return false;
      if (Limit != other.Limit) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
      if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
      if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (Forward != false) hash ^= Forward.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.UserId) {
        output.WriteRawTag(10);
        output.WriteBytes(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteBytes(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupId);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Cursor);
      }
      if (Forward != false) {
        output.WriteRawTag(40);
        output.WriteBool(Forward);
      }
      if (Limit != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.UserId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      if (Forward != false) {
        size += 1 + 1;
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessagesList other) {
      if (other == null) {
        return;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.Forward != false) {
        Forward = other.Forward;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadBytes();
            break;
          }
          case 18: {
            Room = input.ReadBytes();
            break;
          }
          case 26: {
            GroupId = input.ReadBytes();
            break;
          }
          case 34: {
            Cursor = input.ReadBytes();
            break;
          }
          case 40: {
            Forward = input.ReadBool();
            break;
          }
          case 48: {
            Limit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TTopicMessages : pb::IMessage<TTopicMessages> {
    private static readonly pb::MessageParser<TTopicMessages> _parser = new pb::MessageParser<TTopicMessages>(() => new TTopicMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages(TTopicMessages other) : this() {
      messages_ = other.messages_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages Clone() {
      return new TTopicMessages(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TopicMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TopicMessage.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TopicMessage> messages_ = new pbc::RepeatedField<global::Nakama.TopicMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TopicMessage> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessages other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TopicPresence : pb::IMessage<TopicPresence> {
    private static readonly pb::MessageParser<TopicPresence> _parser = new pb::MessageParser<TopicPresence>(() => new TopicPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence(TopicPresence other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence Clone() {
      return new TopicPresence(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicPresence other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TMatchCreate : pb::IMessage<TMatchCreate> {
    private static readonly pb::MessageParser<TMatchCreate> _parser = new pb::MessageParser<TMatchCreate>(() => new TMatchCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate(TMatchCreate other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate Clone() {
      return new TMatchCreate(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchCreate other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TMatchJoin : pb::IMessage<TMatchJoin> {
    private static readonly pb::MessageParser<TMatchJoin> _parser = new pb::MessageParser<TMatchJoin>(() => new TMatchJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchJoin(TMatchJoin other) : this() {
      matchId_ = other.matchId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchJoin Clone() {
      return new TMatchJoin(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchJoin other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TMatch : pb::IMessage<TMatch> {
    private static readonly pb::MessageParser<TMatch> _parser = new pb::MessageParser<TMatch>(() => new TMatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch(TMatch other) : this() {
      matchId_ = other.matchId_;
      presences_ = other.presences_.Clone();
      Self = other.self_ != null ? other.Self.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch Clone() {
      return new TMatch(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 3;
    private global::Nakama.UserPresence self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatch other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
          case 18: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 26: {
            if (self_ == null) {
              self_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TMatchDataSend : pb::IMessage<TMatchDataSend> {
    private static readonly pb::MessageParser<TMatchDataSend> _parser = new pb::MessageParser<TMatchDataSend>(() => new TMatchDataSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchDataSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchDataSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchDataSend(TMatchDataSend other) : this() {
      matchId_ = other.matchId_;
      opCode_ = other.opCode_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchDataSend Clone() {
      return new TMatchDataSend(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 2;
    private long opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchDataSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchDataSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchDataSend other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
          case 16: {
            OpCode = input.ReadInt64();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchData : pb::IMessage<MatchData> {
    private static readonly pb::MessageParser<MatchData> _parser = new pb::MessageParser<MatchData>(() => new MatchData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData(MatchData other) : this() {
      matchId_ = other.matchId_;
      Presence = other.presence_ != null ? other.Presence.Clone() : null;
      opCode_ = other.opCode_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData Clone() {
      return new MatchData(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presence" field.</summary>
    public const int PresenceFieldNumber = 2;
    private global::Nakama.UserPresence presence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Presence {
      get { return presence_; }
      set {
        presence_ = value;
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 3;
    private long opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Presence, other.Presence)) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (presence_ != null) hash ^= Presence.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
      if (presence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Presence);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      if (presence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchData other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.presence_ != null) {
        if (presence_ == null) {
          presence_ = new global::Nakama.UserPresence();
        }
        Presence.MergeFrom(other.Presence);
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
          case 18: {
            if (presence_ == null) {
              presence_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(presence_);
            break;
          }
          case 24: {
            OpCode = input.ReadInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TMatchLeave : pb::IMessage<TMatchLeave> {
    private static readonly pb::MessageParser<TMatchLeave> _parser = new pb::MessageParser<TMatchLeave>(() => new TMatchLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchLeave(TMatchLeave other) : this() {
      matchId_ = other.matchId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchLeave Clone() {
      return new TMatchLeave(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchLeave other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchPresence : pb::IMessage<MatchPresence> {
    private static readonly pb::MessageParser<MatchPresence> _parser = new pb::MessageParser<MatchPresence>(() => new MatchPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence(MatchPresence other) : this() {
      matchId_ = other.matchId_;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence Clone() {
      return new MatchPresence(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private pb::ByteString matchId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MatchId);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MatchId);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPresence other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadBytes();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TStorageFetch : pb::IMessage<TStorageFetch> {
    private static readonly pb::MessageParser<TStorageFetch> _parser = new pb::MessageParser<TStorageFetch>(() => new TStorageFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch(TStorageFetch other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch Clone() {
      return new TStorageFetch(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageFetch.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageFetch.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageFetch other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageFetch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageFetch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          userId_ = other.userId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 4;
        private pb::ByteString userId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (UserId != other.UserId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(UserId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                UserId = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TStorageData : pb::IMessage<TStorageData> {
    private static readonly pb::MessageParser<TStorageData> _parser = new pb::MessageParser<TStorageData>(() => new TStorageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData(TStorageData other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData Clone() {
      return new TStorageData(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageData.Types.StorageData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageData.Types.StorageData.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData> data_ = new pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageData other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageData : pb::IMessage<StorageData> {
        private static readonly pb::MessageParser<StorageData> _parser = new pb::MessageParser<StorageData>(() => new StorageData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData(StorageData other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          userId_ = other.userId_;
          value_ = other.value_;
          version_ = other.version_;
          permissionRead_ = other.permissionRead_;
          permissionWrite_ = other.permissionWrite_;
          createdAt_ = other.createdAt_;
          updatedAt_ = other.updatedAt_;
          expiresAt_ = other.expiresAt_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData Clone() {
          return new StorageData(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 4;
        private pb::ByteString userId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 5;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 6;
        private pb::ByteString version_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "permission_read" field.</summary>
        public const int PermissionReadFieldNumber = 7;
        private long permissionRead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PermissionRead {
          get { return permissionRead_; }
          set {
            permissionRead_ = value;
          }
        }

        /// <summary>Field number for the "permission_write" field.</summary>
        public const int PermissionWriteFieldNumber = 8;
        private long permissionWrite_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PermissionWrite {
          get { return permissionWrite_; }
          set {
            permissionWrite_ = value;
          }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 9;
        private long createdAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        /// <summary>Field number for the "updated_at" field.</summary>
        public const int UpdatedAtFieldNumber = 10;
        private long updatedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpdatedAt {
          get { return updatedAt_; }
          set {
            updatedAt_ = value;
          }
        }

        /// <summary>Field number for the "expires_at" field.</summary>
        public const int ExpiresAtFieldNumber = 11;
        private long expiresAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpiresAt {
          get { return expiresAt_; }
          set {
            expiresAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (UserId != other.UserId) return false;
          if (Value != other.Value) return false;
          if (Version != other.Version) return false;
          if (PermissionRead != other.PermissionRead) return false;
          if (PermissionWrite != other.PermissionWrite) return false;
          if (CreatedAt != other.CreatedAt) return false;
          if (UpdatedAt != other.UpdatedAt) return false;
          if (ExpiresAt != other.ExpiresAt) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (PermissionRead != 0L) hash ^= PermissionRead.GetHashCode();
          if (PermissionWrite != 0L) hash ^= PermissionWrite.GetHashCode();
          if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
          if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
          if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(UserId);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Value);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(50);
            output.WriteBytes(Version);
          }
          if (PermissionRead != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(PermissionRead);
          }
          if (PermissionWrite != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(PermissionWrite);
          }
          if (CreatedAt != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(CreatedAt);
          }
          if (UpdatedAt != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(UpdatedAt);
          }
          if (ExpiresAt != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(ExpiresAt);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserId);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
          }
          if (PermissionRead != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PermissionRead);
          }
          if (PermissionWrite != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PermissionWrite);
          }
          if (CreatedAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
          }
          if (UpdatedAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
          }
          if (ExpiresAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageData other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          if (other.PermissionRead != 0L) {
            PermissionRead = other.PermissionRead;
          }
          if (other.PermissionWrite != 0L) {
            PermissionWrite = other.PermissionWrite;
          }
          if (other.CreatedAt != 0L) {
            CreatedAt = other.CreatedAt;
          }
          if (other.UpdatedAt != 0L) {
            UpdatedAt = other.UpdatedAt;
          }
          if (other.ExpiresAt != 0L) {
            ExpiresAt = other.ExpiresAt;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                UserId = input.ReadBytes();
                break;
              }
              case 42: {
                Value = input.ReadBytes();
                break;
              }
              case 50: {
                Version = input.ReadBytes();
                break;
              }
              case 56: {
                PermissionRead = input.ReadInt64();
                break;
              }
              case 64: {
                PermissionWrite = input.ReadInt64();
                break;
              }
              case 72: {
                CreatedAt = input.ReadInt64();
                break;
              }
              case 80: {
                UpdatedAt = input.ReadInt64();
                break;
              }
              case 88: {
                ExpiresAt = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TStorageWrite : pb::IMessage<TStorageWrite> {
    private static readonly pb::MessageParser<TStorageWrite> _parser = new pb::MessageParser<TStorageWrite>(() => new TStorageWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite(TStorageWrite other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite Clone() {
      return new TStorageWrite(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.TStorageWrite.Types.StorageData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.TStorageWrite.Types.StorageData.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData> data_ = new pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageWrite other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageWrite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageData : pb::IMessage<StorageData> {
        private static readonly pb::MessageParser<StorageData> _parser = new pb::MessageParser<StorageData>(() => new StorageData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageWrite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData(StorageData other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          value_ = other.value_;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData Clone() {
          return new StorageData(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 5;
        private pb::ByteString version_ = pb::ByteString.Empty;
        /// <summary>
        /// if-match and if-none-match
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Value != other.Value) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Value);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageData other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Value = input.ReadBytes();
                break;
              }
              case 42: {
                Version = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TStorageKey : pb::IMessage<TStorageKey> {
    private static readonly pb::MessageParser<TStorageKey> _parser = new pb::MessageParser<TStorageKey>(() => new TStorageKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKey(TStorageKey other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKey Clone() {
      return new TStorageKey(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageKey.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageKey.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageKey.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageKey.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageKey.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageKey other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageKey message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageKey.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private pb::ByteString version_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Version = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TStorageRemove : pb::IMessage<TStorageRemove> {
    private static readonly pb::MessageParser<TStorageRemove> _parser = new pb::MessageParser<TStorageRemove>(() => new TStorageRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove(TStorageRemove other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove Clone() {
      return new TStorageRemove(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageRemove.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageRemove.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageRemove other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageRemove message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageRemove.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private pb::ByteString version_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Version = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Leaderboard : pb::IMessage<Leaderboard> {
    private static readonly pb::MessageParser<Leaderboard> _parser = new pb::MessageParser<Leaderboard>(() => new Leaderboard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Leaderboard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard(Leaderboard other) : this() {
      id_ = other.id_;
      authoritative_ = other.authoritative_;
      sort_ = other.sort_;
      count_ = other.count_;
      resetSchedule_ = other.resetSchedule_;
      metadata_ = other.metadata_;
      nextId_ = other.nextId_;
      prevId_ = other.prevId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard Clone() {
      return new Leaderboard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 2;
    private bool authoritative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { return authoritative_; }
      set {
        authoritative_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 3;
    private long sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "reset_schedule" field.</summary>
    public const int ResetScheduleFieldNumber = 5;
    private string resetSchedule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResetSchedule {
      get { return resetSchedule_; }
      set {
        resetSchedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next_id" field.</summary>
    public const int NextIdFieldNumber = 7;
    private pb::ByteString nextId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NextId {
      get { return nextId_; }
      set {
        nextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_id" field.</summary>
    public const int PrevIdFieldNumber = 8;
    private pb::ByteString prevId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevId {
      get { return prevId_; }
      set {
        prevId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Leaderboard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Leaderboard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Sort != other.Sort) return false;
      if (Count != other.Count) return false;
      if (ResetSchedule != other.ResetSchedule) return false;
      if (Metadata != other.Metadata) return false;
      if (NextId != other.NextId) return false;
      if (PrevId != other.PrevId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Authoritative != false) hash ^= Authoritative.GetHashCode();
      if (Sort != 0L) hash ^= Sort.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (ResetSchedule.Length != 0) hash ^= ResetSchedule.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (NextId.Length != 0) hash ^= NextId.GetHashCode();
      if (PrevId.Length != 0) hash ^= PrevId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (Sort != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Sort);
      }
      if (Count != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Count);
      }
      if (ResetSchedule.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResetSchedule);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (NextId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(NextId);
      }
      if (PrevId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(PrevId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Authoritative != false) {
        size += 1 + 1;
      }
      if (Sort != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sort);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (ResetSchedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResetSchedule);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (NextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NextId);
      }
      if (PrevId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrevId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Leaderboard other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Authoritative != false) {
        Authoritative = other.Authoritative;
      }
      if (other.Sort != 0L) {
        Sort = other.Sort;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.ResetSchedule.Length != 0) {
        ResetSchedule = other.ResetSchedule;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.NextId.Length != 0) {
        NextId = other.NextId;
      }
      if (other.PrevId.Length != 0) {
        PrevId = other.PrevId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 24: {
            Sort = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadInt64();
            break;
          }
          case 42: {
            ResetSchedule = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 58: {
            NextId = input.ReadBytes();
            break;
          }
          case 66: {
            PrevId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaderboardRecord : pb::IMessage<LeaderboardRecord> {
    private static readonly pb::MessageParser<LeaderboardRecord> _parser = new pb::MessageParser<LeaderboardRecord>(() => new LeaderboardRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaderboardRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord(LeaderboardRecord other) : this() {
      leaderboardId_ = other.leaderboardId_;
      ownerId_ = other.ownerId_;
      handle_ = other.handle_;
      lang_ = other.lang_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      rank_ = other.rank_;
      score_ = other.score_;
      numScore_ = other.numScore_;
      metadata_ = other.metadata_;
      rankedAt_ = other.rankedAt_;
      updatedAt_ = other.updatedAt_;
      expiresAt_ = other.expiresAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord Clone() {
      return new LeaderboardRecord(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private pb::ByteString leaderboardId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private pb::ByteString ownerId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 3;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 4;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private long rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 8;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "num_score" field.</summary>
    public const int NumScoreFieldNumber = 9;
    private long numScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumScore {
      get { return numScore_; }
      set {
        numScore_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ranked_at" field.</summary>
    public const int RankedAtFieldNumber = 11;
    private long rankedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RankedAt {
      get { return rankedAt_; }
      set {
        rankedAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 12;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 13;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaderboardRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaderboardRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Handle != other.Handle) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Rank != other.Rank) return false;
      if (Score != other.Score) return false;
      if (NumScore != other.NumScore) return false;
      if (Metadata != other.Metadata) return false;
      if (RankedAt != other.RankedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Rank != 0L) hash ^= Rank.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (NumScore != 0L) hash ^= NumScore.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (RankedAt != 0L) hash ^= RankedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Handle);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Lang);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Timezone);
      }
      if (Rank != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Rank);
      }
      if (Score != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Score);
      }
      if (NumScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(NumScore);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Metadata);
      }
      if (RankedAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(RankedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UpdatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(ExpiresAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Rank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (NumScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumScore);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (RankedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RankedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaderboardRecord other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Rank != 0L) {
        Rank = other.Rank;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.NumScore != 0L) {
        NumScore = other.NumScore;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.RankedAt != 0L) {
        RankedAt = other.RankedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeaderboardId = input.ReadBytes();
            break;
          }
          case 18: {
            OwnerId = input.ReadBytes();
            break;
          }
          case 26: {
            Handle = input.ReadString();
            break;
          }
          case 34: {
            Lang = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
          case 50: {
            Timezone = input.ReadString();
            break;
          }
          case 56: {
            Rank = input.ReadInt64();
            break;
          }
          case 64: {
            Score = input.ReadInt64();
            break;
          }
          case 72: {
            NumScore = input.ReadInt64();
            break;
          }
          case 82: {
            Metadata = input.ReadBytes();
            break;
          }
          case 88: {
            RankedAt = input.ReadInt64();
            break;
          }
          case 96: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 104: {
            ExpiresAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboardsList : pb::IMessage<TLeaderboardsList> {
    private static readonly pb::MessageParser<TLeaderboardsList> _parser = new pb::MessageParser<TLeaderboardsList>(() => new TLeaderboardsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList(TLeaderboardsList other) : this() {
      limit_ = other.limit_;
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList Clone() {
      return new TLeaderboardsList(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardsList other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadInt64();
            break;
          }
          case 18: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboards : pb::IMessage<TLeaderboards> {
    private static readonly pb::MessageParser<TLeaderboards> _parser = new pb::MessageParser<TLeaderboards>(() => new TLeaderboards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards(TLeaderboards other) : this() {
      leaderboards_ = other.leaderboards_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards Clone() {
      return new TLeaderboards(this);
    }

    /// <summary>Field number for the "leaderboards" field.</summary>
    public const int LeaderboardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Leaderboard> _repeated_leaderboards_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Leaderboard.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Leaderboard> leaderboards_ = new pbc::RepeatedField<global::Nakama.Leaderboard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Leaderboard> Leaderboards {
      get { return leaderboards_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leaderboards_.Equals(other.leaderboards_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leaderboards_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leaderboards_.WriteTo(output, _repeated_leaderboards_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leaderboards_.CalculateSize(_repeated_leaderboards_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboards other) {
      if (other == null) {
        return;
      }
      leaderboards_.Add(other.leaderboards_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            leaderboards_.AddEntriesFrom(input, _repeated_leaderboards_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboardRecordWrite : pb::IMessage<TLeaderboardRecordWrite> {
    private static readonly pb::MessageParser<TLeaderboardRecordWrite> _parser = new pb::MessageParser<TLeaderboardRecordWrite>(() => new TLeaderboardRecordWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordWrite(TLeaderboardRecordWrite other) : this() {
      leaderboardId_ = other.leaderboardId_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      metadata_ = other.metadata_;
      switch (other.OpCase) {
        case OpOneofCase.Incr:
          Incr = other.Incr;
          break;
        case OpOneofCase.Decr:
          Decr = other.Decr;
          break;
        case OpOneofCase.Set:
          Set = other.Set;
          break;
        case OpOneofCase.Best:
          Best = other.Best;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordWrite Clone() {
      return new TLeaderboardRecordWrite(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private pb::ByteString leaderboardId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "incr" field.</summary>
    public const int IncrFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Incr {
      get { return opCase_ == OpOneofCase.Incr ? (long) op_ : 0L; }
      set {
        op_ = value;
        opCase_ = OpOneofCase.Incr;
      }
    }

    /// <summary>Field number for the "decr" field.</summary>
    public const int DecrFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Decr {
      get { return opCase_ == OpOneofCase.Decr ? (long) op_ : 0L; }
      set {
        op_ = value;
        opCase_ = OpOneofCase.Decr;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Set {
      get { return opCase_ == OpOneofCase.Set ? (long) op_ : 0L; }
      set {
        op_ = value;
        opCase_ = OpOneofCase.Set;
      }
    }

    /// <summary>Field number for the "best" field.</summary>
    public const int BestFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Best {
      get { return opCase_ == OpOneofCase.Best ? (long) op_ : 0L; }
      set {
        op_ = value;
        opCase_ = OpOneofCase.Best;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 7;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object op_;
    /// <summary>Enum of possible cases for the "op" oneof.</summary>
    public enum OpOneofCase {
      None = 0,
      Incr = 2,
      Decr = 3,
      Set = 4,
      Best = 5,
    }
    private OpOneofCase opCase_ = OpOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpOneofCase OpCase {
      get { return opCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOp() {
      opCase_ = OpOneofCase.None;
      op_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (Incr != other.Incr) return false;
      if (Decr != other.Decr) return false;
      if (Set != other.Set) return false;
      if (Best != other.Best) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Metadata != other.Metadata) return false;
      if (OpCase != other.OpCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (opCase_ == OpOneofCase.Incr) hash ^= Incr.GetHashCode();
      if (opCase_ == OpOneofCase.Decr) hash ^= Decr.GetHashCode();
      if (opCase_ == OpOneofCase.Set) hash ^= Set.GetHashCode();
      if (opCase_ == OpOneofCase.Best) hash ^= Best.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      hash ^= (int) opCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(LeaderboardId);
      }
      if (opCase_ == OpOneofCase.Incr) {
        output.WriteRawTag(16);
        output.WriteInt64(Incr);
      }
      if (opCase_ == OpOneofCase.Decr) {
        output.WriteRawTag(24);
        output.WriteInt64(Decr);
      }
      if (opCase_ == OpOneofCase.Set) {
        output.WriteRawTag(32);
        output.WriteInt64(Set);
      }
      if (opCase_ == OpOneofCase.Best) {
        output.WriteRawTag(40);
        output.WriteInt64(Best);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timezone);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderboardId);
      }
      if (opCase_ == OpOneofCase.Incr) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Incr);
      }
      if (opCase_ == OpOneofCase.Decr) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Decr);
      }
      if (opCase_ == OpOneofCase.Set) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Set);
      }
      if (opCase_ == OpOneofCase.Best) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Best);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordWrite other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      switch (other.OpCase) {
        case OpOneofCase.Incr:
          Incr = other.Incr;
          break;
        case OpOneofCase.Decr:
          Decr = other.Decr;
          break;
        case OpOneofCase.Set:
          Set = other.Set;
          break;
        case OpOneofCase.Best:
          Best = other.Best;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeaderboardId = input.ReadBytes();
            break;
          }
          case 16: {
            Incr = input.ReadInt64();
            break;
          }
          case 24: {
            Decr = input.ReadInt64();
            break;
          }
          case 32: {
            Set = input.ReadInt64();
            break;
          }
          case 40: {
            Best = input.ReadInt64();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 58: {
            Timezone = input.ReadString();
            break;
          }
          case 66: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboardRecord : pb::IMessage<TLeaderboardRecord> {
    private static readonly pb::MessageParser<TLeaderboardRecord> _parser = new pb::MessageParser<TLeaderboardRecord>(() => new TLeaderboardRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecord(TLeaderboardRecord other) : this() {
      Record = other.record_ != null ? other.Record.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecord Clone() {
      return new TLeaderboardRecord(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Nakama.LeaderboardRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.LeaderboardRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Record, other.Record)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (record_ != null) hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecord other) {
      if (other == null) {
        return;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          record_ = new global::Nakama.LeaderboardRecord();
        }
        Record.MergeFrom(other.Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (record_ == null) {
              record_ = new global::Nakama.LeaderboardRecord();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboardRecordsFetch : pb::IMessage<TLeaderboardRecordsFetch> {
    private static readonly pb::MessageParser<TLeaderboardRecordsFetch> _parser = new pb::MessageParser<TLeaderboardRecordsFetch>(() => new TLeaderboardRecordsFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordsFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch(TLeaderboardRecordsFetch other) : this() {
      leaderboardIds_ = other.leaderboardIds_.Clone();
      limit_ = other.limit_;
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch Clone() {
      return new TLeaderboardRecordsFetch(this);
    }

    /// <summary>Field number for the "leaderboard_ids" field.</summary>
    public const int LeaderboardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_leaderboardIds_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> leaderboardIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> LeaderboardIds {
      get { return leaderboardIds_; }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 3;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordsFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordsFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leaderboardIds_.Equals(other.leaderboardIds_)) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leaderboardIds_.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leaderboardIds_.WriteTo(output, _repeated_leaderboardIds_codec);
      if (Limit != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leaderboardIds_.CalculateSize(_repeated_leaderboardIds_codec);
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordsFetch other) {
      if (other == null) {
        return;
      }
      leaderboardIds_.Add(other.leaderboardIds_);
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            leaderboardIds_.AddEntriesFrom(input, _repeated_leaderboardIds_codec);
            break;
          }
          case 16: {
            Limit = input.ReadInt64();
            break;
          }
          case 26: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TLeaderboardRecordsList : pb::IMessage<TLeaderboardRecordsList> {
    private static readonly pb::MessageParser<TLeaderboardRecordsList> _parser = new pb::MessageParser<TLeaderboardRecordsList>(() => new TLeaderboardRecordsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList(TLeaderboardRecordsList other) : this() {
      leaderboardId_ = other.leaderboardId_;
      limit_ = other.limit_;
      cursor_ = other.cursor_;
      switch (other.FilterCase) {
        case FilterOneofCase.OwnerId:
          OwnerId = other.OwnerId;
          break;
        case FilterOneofCase.OwnerIds:
          OwnerIds = other.OwnerIds.Clone();
          break;
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.Location:
          Location = other.Location;
          break;
        case FilterOneofCase.Timezone:
          Timezone = other.Timezone;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList Clone() {
      return new TLeaderboardRecordsList(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private pb::ByteString leaderboardId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    /// <summary>
    /// "haystack" lookup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerId {
      get { return filterCase_ == FilterOneofCase.OwnerId ? (pb::ByteString) filter_ : pb::ByteString.Empty; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.OwnerId;
      }
    }

    /// <summary>Field number for the "owner_ids" field.</summary>
    public const int OwnerIdsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsList.Types.Owners OwnerIds {
      get { return filterCase_ == FilterOneofCase.OwnerIds ? (global::Nakama.TLeaderboardRecordsList.Types.Owners) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.OwnerIds;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return filterCase_ == FilterOneofCase.Lang ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Lang;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return filterCase_ == FilterOneofCase.Location ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Location;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return filterCase_ == FilterOneofCase.Timezone ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Timezone;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 7;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 8;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      OwnerId = 2,
      OwnerIds = 3,
      Lang = 4,
      Location = 5,
      Timezone = 6,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (!object.Equals(OwnerIds, other.OwnerIds)) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (filterCase_ == FilterOneofCase.OwnerId) hash ^= OwnerId.GetHashCode();
      if (filterCase_ == FilterOneofCase.OwnerIds) hash ^= OwnerIds.GetHashCode();
      if (filterCase_ == FilterOneofCase.Lang) hash ^= Lang.GetHashCode();
      if (filterCase_ == FilterOneofCase.Location) hash ^= Location.GetHashCode();
      if (filterCase_ == FilterOneofCase.Timezone) hash ^= Timezone.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(LeaderboardId);
      }
      if (filterCase_ == FilterOneofCase.OwnerId) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerId);
      }
      if (filterCase_ == FilterOneofCase.OwnerIds) {
        output.WriteRawTag(26);
        output.WriteMessage(OwnerIds);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        output.WriteRawTag(34);
        output.WriteString(Lang);
      }
      if (filterCase_ == FilterOneofCase.Location) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (filterCase_ == FilterOneofCase.Timezone) {
        output.WriteRawTag(50);
        output.WriteString(Timezone);
      }
      if (Limit != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderboardId);
      }
      if (filterCase_ == FilterOneofCase.OwnerId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerId);
      }
      if (filterCase_ == FilterOneofCase.OwnerIds) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnerIds);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (filterCase_ == FilterOneofCase.Location) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (filterCase_ == FilterOneofCase.Timezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordsList other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.OwnerId:
          OwnerId = other.OwnerId;
          break;
        case FilterOneofCase.OwnerIds:
          OwnerIds = other.OwnerIds;
          break;
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.Location:
          Location = other.Location;
          break;
        case FilterOneofCase.Timezone:
          Timezone = other.Timezone;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeaderboardId = input.ReadBytes();
            break;
          }
          case 18: {
            OwnerId = input.ReadBytes();
            break;
          }
          case 26: {
            global::Nakama.TLeaderboardRecordsList.Types.Owners subBuilder = new global::Nakama.TLeaderboardRecordsList.Types.Owners();
            if (filterCase_ == FilterOneofCase.OwnerIds) {
              subBuilder.MergeFrom(OwnerIds);
            }
            input.ReadMessage(subBuilder);
            OwnerIds = subBuilder;
            break;
          }
          case 34: {
            Lang = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
          case 50: {
            Timezone = input.ReadString();
            break;
          }
          case 56: {
            Limit = input.ReadInt64();
            break;
          }
          case 66: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TLeaderboardRecordsList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Owners : pb::IMessage<Owners> {
        private static readonly pb::MessageParser<Owners> _parser = new pb::MessageParser<Owners>(() => new Owners());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Owners> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TLeaderboardRecordsList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners(Owners other) : this() {
          ownerIds_ = other.ownerIds_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners Clone() {
          return new Owners(this);
        }

        /// <summary>Field number for the "owner_ids" field.</summary>
        public const int OwnerIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_ownerIds_codec
            = pb::FieldCodec.ForBytes(10);
        private readonly pbc::RepeatedField<pb::ByteString> ownerIds_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> OwnerIds {
          get { return ownerIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Owners);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Owners other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!ownerIds_.Equals(other.ownerIds_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= ownerIds_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          ownerIds_.WriteTo(output, _repeated_ownerIds_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += ownerIds_.CalculateSize(_repeated_ownerIds_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Owners other) {
          if (other == null) {
            return;
          }
          ownerIds_.Add(other.ownerIds_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ownerIds_.AddEntriesFrom(input, _repeated_ownerIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TLeaderboardRecords : pb::IMessage<TLeaderboardRecords> {
    private static readonly pb::MessageParser<TLeaderboardRecords> _parser = new pb::MessageParser<TLeaderboardRecords>(() => new TLeaderboardRecords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords(TLeaderboardRecords other) : this() {
      records_ = other.records_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords Clone() {
      return new TLeaderboardRecords(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> records_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private pb::ByteString cursor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecords other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
